const { Client, LocalAuth, MessageMedia, Buttons, List } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const autoAcceptRequests = {};
const gameStates = new Map();
const random = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const choice = (arr) => arr[random(0, arr.length - 1)];
const percentage = () => random(0, 100);
const DEFAULT_PREFIX = '.';
let prefixes = {}; // caricalo/salvalo da JSON come fai per gli altri dati
const userStatsFile = './userStats.json';

// funzione corretta
function getPrefix(chatId) {
  return prefixes && prefixes[chatId] ? prefixes[chatId] : DEFAULT_PREFIX;
} // <- <- chiusura obbligatoria

let text = '';


// ---------------------- DATABASE ----------------------
let groupData = {};
let games = {};
let economy = {};
let userStats = {};
let marriages = {};
let pets = {};
let warnings = {};
let automodConfig = {};
let botData = {};
const startTime = Date.now();

function loadData() {
    try {
        if (fs.existsSync('./groupData.json')) groupData = JSON.parse(fs.readFileSync('./groupData.json', 'utf8'));
        if (fs.existsSync('./games.json')) games = JSON.parse(fs.readFileSync('./games.json', 'utf8'));
        if (fs.existsSync('./economy.json')) economy = JSON.parse(fs.readFileSync('./economy.json', 'utf8'));
        if (fs.existsSync('./userStats.json')) userStats = JSON.parse(fs.readFileSync('./userStats.json', 'utf8'));
        if (fs.existsSync('./marriages.json')) marriages = JSON.parse(fs.readFileSync('./marriages.json', 'utf8'));
        if (fs.existsSync('./pets.json')) pets = JSON.parse(fs.readFileSync('./pets.json', 'utf8'));
        if (fs.existsSync('./warnings.json')) warnings = JSON.parse(fs.readFileSync('./warnings.json', 'utf8'));
        if (fs.existsSync('./automod.json')) automodConfig = JSON.parse(fs.readFileSync('./automod.json', 'utf8'));
        if (fs.existsSync('./botData.json')) botData = JSON.parse(fs.readFileSync('./botData.json', 'utf8'));
        if (fs.existsSync('./gameStates.json')) gameStates = JSON.parse(fs.readFileSync('./gameStates.json', 'utf8'));
    } catch (err) {
        console.log('‚ö†Ô∏è Errore caricamento dati:', err);
    }
}

function saveData() {
    try {
        fs.writeFileSync('./groupData.json', JSON.stringify(groupData, null, 2));
        fs.writeFileSync('./games.json', JSON.stringify(games, null, 2));
        fs.writeFileSync('./economy.json', JSON.stringify(economy, null, 2));
        fs.writeFileSync('./userStats.json', JSON.stringify(userStats, null, 2));
        fs.writeFileSync('./marriages.json', JSON.stringify(marriages, null, 2));
        fs.writeFileSync('./pets.json', JSON.stringify(pets, null, 2));
        fs.writeFileSync('./warnings.json', JSON.stringify(warnings, null, 2));
        fs.writeFileSync('./automod.json', JSON.stringify(automodConfig, null, 2));
        fs.writeFileSync('./gameStates.json', JSON.stringify(gameStates, null, 2));
        fs.writeFileSync('./botData.json', JSON.stringify(botData, null, 2));
    } catch (err) {
        console.log('‚ö†Ô∏è Errore salvataggio dati:', err);
    }
}

function initGroup(groupId) {
    if (!groupData[groupId]) {
        groupData[groupId] = {
            mutedUsers: [],
            bannedUsers: [],
            warnings: {},
            adminMode: false,
            antilink: false,
            blockedWords: [],
            slowmode: 0,
            lastMessage: {},
            rules: '',
            welcomeEnabled: true,
            goodbyeEnabled: true,
            autoKickWarns: 3,
            welcomeMessage: 'üëã Benvenuto {user} nel gruppo *{group}*! üéâ',
            goodbyeMessage: 'üëã Ciao {user}, ci mancherai! üíî',
            levelSystem: true,
            antiSpam: false,
            polls: {},
            lockSettings: false,
            antiBot: false,
            maxWarns: 3,
            muteTime: {}
        };
    }
    if (!automodConfig[groupId]) {
        automodConfig[groupId] = {
            autoDelete: true,
            antiFlood: false,
            antiRaid: false,
            captchaEnabled: false,
            maxMessages: 5,
            timeWindow: 10
        };
    }
}

function initUser(userId) {
    if (!economy[userId]) {
        economy[userId] = {
            money: 100,
            bank: 0,
            inventory: [],
            lastDaily: 0,
            lastWork: 0,
            lastRob: 0,
            lastCrime: 0,
            lastWeekly: 0,
            lastMonthly: 0
        };
    }
    if (!userStats[userId]) {
        userStats[userId] = {
            level: 1,
            xp: 0,
            messages: 0,
            reputation: 0,
            bio: '',
            lastXP: 0,
            lastRep: 0
        };
    }
    if (!pets[userId]) {
        pets[userId] = {
            name: '',
            type: '',
            hunger: 100,
            happiness: 100,
            health: 100,
            lastFed: 0,
            lastPlayed: 0
        };
    }
}

// ---------------------- CLIENT ----------------------
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu']
    }
});

client.on('qr', (qr) => {
    console.log('üì± Scansiona questo QR con WhatsApp:');
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('‚úÖ ü§ñ Bot WhatsApp pronto e operativo!');
    loadData();
});

client.on('authenticated', () => {
    console.log('üîê Autenticazione completata!');
});

client.on('auth_failure', () => {
    console.error('‚ùå Autenticazione fallita!');
});

client.on('disconnected', (reason) => {
    console.log('‚ö†Ô∏è Bot disconnesso:', reason);
});

// ---------------------- UTILITY ----------------------
const nowSeconds = () => Math.floor(Date.now() / 1000);
const getUserIdFromMsg = (msg) => msg.author || msg.from;

const getNormalizedNumber = async (msg) => {
    try {
        const contact = await msg.getContact();
        const userId = contact.id._serialized;
        return userId.split('@')[0];
    } catch {
        const userId = msg.author || msg.from;
        return userId.split('@')[0];
    }
};

// EVENTO BENVENUTO AUTOMATICO (con tag funzionante)
client.on('group_join', async (notification) => {
  try {
    const chat = await client.getChatById(notification.chatId);
    if (!chat || !chat.isGroup) return;

    // ID del nuovo membro (es. "39333xxxxxxx@c.us")
    const newMemberId = notification.recipientIds && notification.recipientIds[0];
    if (!newMemberId) return;

    // Recupera il contatto
    const contact = await client.getContactById(newMemberId);
    const displayTag = contact.number || newMemberId.split('@')[0]; // testo che comparir√† dopo la @
    const mentionObj = contact; // oggetto da passare in mentions

    // Messaggio di benvenuto ‚Äî includi @displayTag nel testo
    const welcomeMsg = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëã *BENVENUTO/A!*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ciao @${displayTag} üéâ

Benvenuto/a nel gruppo!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìù *Presentati con:*

üë§ Nome
üéÇ Et√†
üìç Provenienza
üì∏ Foto profilo a 1 visual

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí¨ Buona permanenza!`;

    // Invia il messaggio con il mention (tag)
    await chat.sendMessage(welcomeMsg, {
      mentions: [mentionObj]
    });

    console.log(`[WELCOME] ${contact.pushname || displayTag} √® entrato nel gruppo ${chat.name}`);
  } catch (error) {
    console.error('Errore evento group_join:', error);
  }
});


// Controlla se l'autore del messaggio √® admin nel gruppo
async function isAdmin(msg, chat) {
  try {
    // Se non √® un gruppo, consideriamo "true" (comando in privato)
    if (!chat || !chat.isGroup) return true;

    // Proviamo prima a ottenere il contact (pi√π affidabile)
    let senderIdRaw = '';
    try {
      const contact = await msg.getContact(); // restituisce il contatto del mittente
      senderIdRaw = contact && contact.id && contact.id._serialized ? contact.id._serialized : '';
    } catch (e) {
      // fallback se getContact() fallisce
      senderIdRaw = msg.author || msg.from || '';
    }

    // Normalizza (prendi la parte prima di @)
    const normalize = id => (id || '').split('@')[0];

    const userId = normalize(senderIdRaw);

    // Prendi lo stato aggiornato della chat
    const freshChat = await client.getChatById(chat.id._serialized);
    if (!freshChat || !Array.isArray(freshChat.participants)) return false;

    const participant = freshChat.participants.find(p => {
      const pId = p && p.id && p.id._serialized ? p.id._serialized : '';
      return normalize(pId) === userId;
    });

    // Verifica flag admin/superadmin (some versions use isAdmin/isSuperAdmin)
    return Boolean(participant && (participant.isAdmin === true || participant.isSuperAdmin === true));
  } catch (err) {
    console.error('isAdmin error:', err);
    return false;
  }
}

// Controlla se il bot √® admin nel gruppo
async function isBotAdmin(chat) {
  try {
    if (!chat || !chat.isGroup) return false;

    // Ottieni l'ID del bot in modo pi√π affidabile
    let botId = '';
    
    // Prova diversi metodi per ottenere l'ID del bot
    if (client.info && client.info.wid) {
      botId = client.info.wid._serialized || client.info.wid.user || '';
    } else if (client.info && client.info.me) {
      botId = client.info.me._serialized || client.info.me.user || '';
    }
    
    // Se non otteniamo l'ID completo, proviamo ad estrarre solo il numero
    const botNumber = botId.split('@')[0];
    
    if (!botNumber) {
      console.log('‚ö†Ô∏è Impossibile ottenere ID bot');
      return false;
    }

    // Ottieni la chat aggiornata con i partecipanti
    const freshChat = await client.getChatById(chat.id._serialized);
    
    if (!freshChat || !Array.isArray(freshChat.participants)) {
      console.log('‚ö†Ô∏è Impossibile ottenere partecipanti del gruppo');
      return false;
    }

    // Cerca il bot tra i partecipanti
    const botParticipant = freshChat.participants.find(p => {
      if (!p || !p.id || !p.id._serialized) return false;
      const participantNumber = p.id._serialized.split('@')[0];
      return participantNumber === botNumber;
    });

    if (!botParticipant) {
      console.log('‚ö†Ô∏è Bot non trovato tra i partecipanti');
      return false;
    }

    // Verifica se il bot √® admin o super admin
    const isAdminStatus = botParticipant.isAdmin === true || botParticipant.isSuperAdmin === true;
    
    // Debug log (rimuovi in produzione)
    console.log(`Bot admin status in ${chat.name}: ${isAdminStatus}`);
    
    return isAdminStatus;

  } catch (err) {
    console.error('‚ùå isBotAdmin error:', err.message);
    return false;
  }
}


function addXP(userId, amount) {
    initUser(userId);
    const now = Date.now();
    if (now - userStats[userId].lastXP < 60000) return false;
    userStats[userId].xp += amount;
    userStats[userId].lastXP = now;
    const xpNeeded = userStats[userId].level * 100;
    if (userStats[userId].xp >= xpNeeded) {
        userStats[userId].level++;
        userStats[userId].xp = 0;
        saveData();
        return true;
    }
    saveData();
    return false;
}



// Funzioni helper per livelli
function calculateLevel(xp) {
    return Math.floor(Math.sqrt(xp / 100));
}

function getXPForLevel(level) {
    return level * level * 100;
}

function createProgressBar(current, total, length = 10) {
    const filled = Math.floor((current / total) * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}

function getUserStats(userId) {
    initUser(userId); // Crea l'utente se non esiste
    return userStats[userId]; // Restituisci direttamente l'oggetto
}

function formatTime(seconds) {
    const d = Math.floor(seconds / 86400);
    const h = Math.floor((seconds % 86400) / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    let result = '';
    if (d > 0) result += `${d}g `;
    if (h > 0) result += `${h}h `;
    if (m > 0) result += `${m}m `;
    if (s > 0) result += `${s}s`;
    return result.trim();
}

// Alias per compatibilit√†
const formatUptime = formatTime;

// Funzione helper per ottenere il nome visualizzato di un utente
async function getUserDisplayName(userId, chat) {
    try {
        const contact = await client.getContactById(userId);
        return contact.pushname || contact.name || userId.split('@')[0];
    } catch (err) {
        return userId.split('@')[0];
    }
}

// ---------------- Helper: pin/unpin resiliente per WhatsApp Web ----------------
async function evaluatePinUnpin(pupPage, msgIdSerialized, pinBoolean) {
  if (!pupPage) throw new Error('pupPage non disponibile (client.pupPage).');
  return await pupPage.evaluate(async (msgId, pin) => {
    function findMessage(id) {
      try {
        if (window.Store && window.Store.Msg) {
          if (typeof window.Store.Msg.get === 'function') {
            return window.Store.Msg.get(id);
          }
          // fallback: cerca in models
          if (Array.isArray(window.Store.Msg.models)) {
            return window.Store.Msg.models.find(m => m && m.id && (m.id._serialized === id || m.id.id === id));
          }
        }
      } catch (e) { /* ignore */ }
      return null;
    }

    const message = findMessage(msgId);
    if (!message) throw new Error('Message object non trovato in window.Store (msgId: ' + msgId + ')');

    // 1) se esiste la funzione compatibile -> usala direttamente
    try {
      if (window.Store && typeof window.Store.pinUnpinMsg === 'function') {
        return await window.Store.pinUnpinMsg(message, !!pin);
      }
    } catch (e) { /* prosegui fallback */ }

    // 2) prova metodi su Store.Msg (nomi probabili: pin, pinMessage, togglePin, setPinned...)
    try {
      if (window.Store && window.Store.Msg) {
        const candidates = Object.keys(window.Store.Msg).filter(k => /pin|pinned|toggle/i.test(k));
        for (const c of candidates) {
          try {
            if (typeof window.Store.Msg[c] === 'function') {
              return await window.Store.Msg[c](message, !!pin);
            }
          } catch (err) { /* ignora candidato fallito */ }
        }
      }

      // Chat-level
      if (message.chat && window.Store.Chat && typeof window.Store.Chat.get === 'function') {
        const chatKey = message.chat._serialized || (message.chat.id && message.chat.id._serialized) || message.chat;
        const chatObj = window.Store.Chat.get(chatKey) || window.Store.Chat.get(message.chat._serialized || chatKey);
        if (chatObj) {
          if (typeof chatObj.pin === 'function') {
            return await chatObj.pin(message, !!pin);
          }
          if (typeof chatObj.togglePin === 'function') {
            return await chatObj.togglePin(message, !!pin);
          }
        }
      }
    } catch (e) { /* ignora */ }

    // 3) ricerca dinamica su window.Store e sotto-oggetti per funzioni con "pin" nel nome
    try {
      for (const key of Object.keys(window.Store || {})) {
        const obj = window.Store[key];
        if (!obj) continue;
        if (typeof obj === 'function' && /pin/i.test(key)) {
          try { return await obj(message, !!pin); } catch(e) {}
        }
        if (typeof obj === 'object') {
          for (const sub of Object.keys(obj)) {
            if (/pin/i.test(sub) && typeof obj[sub] === 'function') {
              try { return await obj[sub](message, !!pin); } catch(e) {}
            }
          }
        }
      }
    } catch (e) { /* ignora */ }

    // 4) se niente trovato, installa wrapper descrittivo (utile per debug futuro) e fallisci in modo esplicito
    try {
      if (window.Store) {
        window.Store.pinUnpinMsg = function() {
          throw new Error('Wrapper pinUnpinMsg: nessuna implementazione trovata in questa build di WhatsApp Web.');
        };
      }
    } catch (e) {}

    throw new Error('Nessuna API di pin/unpin trovata in window.Store (versione WhatsApp Web incompatibile).');
  }, msgIdSerialized, pinBoolean);
}

// --------- (OPZIONALE) funzione di diagnostica da eseguire se vuoi capire le API disponibili -----
// Usa: const diag = await client.pupPage.evaluate(() => { ... });
// Ti pu√≤ servire per debug; puoi rimuoverla se non ti serve.
async function getStorePinCandidates(pupPage) {
  if (!pupPage) throw new Error('pupPage non disponibile (client.pupPage).');
  return await pupPage.evaluate(() => {
    const keys = Object.keys(window.Store || {}).slice(0, 300);
    const pinCandidates = keys.filter(k => /pin|pinned/i.test(k));
    return { keysCount: keys.length, pinCandidates, keysSample: keys.slice(0, 80) };
  });
}

// Listener per richieste di ingresso gruppo
client.on('group_join_request', async (notification) => {
    try {
        const groupId = notification.chatId;
        
        if (autoAcceptRequests[groupId]) {
            await notification.approve();
            console.log(`‚úÖ Richiesta accettata automaticamente per ${groupId}`);
        }
    } catch (err) {
        console.error('Errore accettazione richiesta:', err);
    }
});

function formatTime(seconds) {
    const d = Math.floor(seconds / 86400);
    const h = Math.floor((seconds % 86400) / 3600);
    const m = Math.floor((seconds % 3600) / 60);
    const s = seconds % 60;
    let result = '';
    if (d > 0) result += `${d}g `;
    if (h > 0) result += `${h}h `;
    if (m > 0) result += `${m}m `;
    if (s > 0) result += `${s}s`;
    return result.trim();
}

// ---------------------- HANDLER MESSAGGI ----------------------
client.on('message', async (msg) => {
    try {
        const chat = await msg.getChat();
        const isGroup = chat.isGroup;
        
        // Inizializza gruppo se necessario
        if (isGroup) initGroup(chat.id._serialized);
        
        const groupInfo = isGroup ? groupData[chat.id._serialized] : null;
        const automod = isGroup ? automodConfig[chat.id._serialized] : null;
        const userNumber = await getNormalizedNumber(msg);
        const userId = getUserIdFromMsg(msg);

        // Sistema XP e messaggi
        if (isGroup && groupInfo?.levelSystem) {
            userStats[userId] = userStats[userId] || { messages: 0 };
            userStats[userId].messages++;
            if (addXP(userId, Math.floor(Math.random() * 5) + 1)) {
                await msg.reply(`üéâüéä *LEVEL UP!* üéäüéâ\n\nüèÜ Sei ora livello *${userStats[userId].level}*!\n‚≠ê Continua cos√¨ campione!`);
            }
        }

        // Utenti mutati - controlla sia numero che ID completo
        const isMuted = groupInfo?.mutedUsers?.some(id => 
            id === userId || id.split('@')[0] === userNumber
        );
        if (isMuted) {
            try { 
                await msg.delete(true); 
                return;
            } catch (err) {
                console.log('Errore eliminazione messaggio mutato:', err);
            }
        }

        // Utenti bannati
        const isBanned = groupInfo?.bannedUsers?.some(id => 
            id === userId || id.split('@')[0] === userNumber
        );
        if (isBanned) {
            if (await isBotAdmin(chat)) {
                try { 
                    await chat.removeParticipants([msg.author]); 
                    return;
                } catch (err) {
                    console.log('Errore rimozione utente bannato:', err);
                }
            }
        }

            // ======== CONTROLLO VISUAL MODE (deve girare PRIMA del parsing comandi) ========
if (isGroup && groupInfo?.visualMode && msg.hasMedia) {
    // Se non √® admin, applica la regola
    if (!await isAdmin(msg, chat)) {
        try {
            const type = msg.type?.toLowerCase(); // tipo del media (image, video, audio, sticker, ecc.)

            // ‚úÖ controlla SOLO foto e video
            if (type === 'image' || type === 'video') {
                // Se il media NON √® "visualizza una volta" ‚Üí elimina e avvisa
                if (!msg.isViewOnce && !msg._data?.isViewOnce) {
                    try { 
                        await msg.delete(true); 
                    } catch (e) { 
                        console.warn('Impossibile eliminare il messaggio:', e.message);
                    }

                    const sender = msg._data?.notifyName || 'Utente';
                    const userId = msg.author || msg.from; // compatibilit√† per diversi tipi di messaggi
                    const contact = await client.getContactById(userId);

                    const warningMsg = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ö†Ô∏è *VISUAL MODE*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

@${userId.split('@')[0]} ‚ö†Ô∏è

‚ùå *Media eliminato!*

üì∏ In questa chat puoi inviare **solo foto e video**
con *visualizzazione singola (1 visual)*!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Suggerimento: quando invii il media,
tocca su üì∏ e scegli "Visualizza una volta" prima di inviare.`;

                    await chat.sendMessage(warningMsg, { mentions: [contact] });
                    console.log(`[VISUAL MODE] Media non view-once eliminato da ${sender}`);
                    return; // Esci: non processare altro su questo messaggio
                }
            }

            // Se √® un altro tipo di media (sticker, audio, ecc.) ‚Üí ignoralo
        } catch (err) {
            console.error('Errore nel controllo visual mode:', err);
            // non bloccare l'esecuzione del resto del codice se fallisce
        }
    }
}


// ======== PARSING PREFIX + COMANDO (robusto per media con caption/no-body) ========
// usa sia msg.body che msg.caption (alcune librerie mettono la caption in msg.caption)
const content = (typeof msg.body === 'string' ? msg.body : (msg.caption || ''))?.trim() || '';

// Se non c'√® testo o caption, non √® un comando testuale: esci
if (!content) return;

// Recupera prefix per la chat (fallback a DEFAULT_PREFIX)
const prefix = typeof getPrefix === 'function' ? getPrefix(msg.from) : DEFAULT_PREFIX;

// Se il contenuto non inizia con il prefix, non √® un comando: esci
if (!content.startsWith(prefix)) return;

// Estrai comando e args
const withoutPrefix = content.slice(prefix.length).trim();
if (!withoutPrefix) return;

const cmdArgs = withoutPrefix.split(/\s+/);



        // Anti-link
        if (groupInfo?.antilink && /https?:\/\/|www\.|wa\.me|whatsapp\.com/i.test(msg.body || '')) {
            if (!(await isAdmin(msg, chat))) {
                try { 
                    await msg.delete(true); 
                    await msg.reply('‚ö†Ô∏èüîó *ANTILINK ATTIVO*\n\nI link non sono permessi in questo gruppo!');
                    return;
                } catch (err) {
                    console.log('Errore antilink:', err);
                }
            }
        }

        // Anti-bot
        if (groupInfo?.antiBot && msg.fromMe === false) {
            const contact = await msg.getContact();
            if (contact.isWAContact === false || contact.isBusiness) {
                if (!(await isAdmin(msg, chat))) {
                    try {
                        await chat.removeParticipants([msg.author]);
                        await msg.reply('ü§ñ‚ùå Bot rilevato e rimosso automaticamente!');
                        return;
                    } catch (err) {
                        console.log('Errore antibot:', err);
                    }
                }
            }
        }

        // Slowmode
        if (groupInfo?.slowmode > 0) {
            const lastMsg = groupInfo.lastMessage?.[userNumber] || 0;
            if (Date.now() - lastMsg < groupInfo.slowmode * 1000) {
                try { 
                    await msg.delete(true); 
                    return;
                } catch {}
            }
            groupInfo.lastMessage = groupInfo.lastMessage || {};
            groupInfo.lastMessage[userNumber] = Date.now();
        }

        // Parole vietate
        if ((msg.body || '').length > 0 && (groupInfo?.blockedWords || []).some(w => (msg.body || '').toLowerCase().includes(w.toLowerCase()))) {
            try { 
                await msg.delete(true); 
                await msg.reply('‚ö†Ô∏èüö´ Hai usato una parola vietata!');
                return;
            } catch {}
        }

        // Carica dati da file all'avvio
if (fs.existsSync(userStatsFile)) {
    try {
        userStats = JSON.parse(fs.readFileSync(userStatsFile, 'utf8'));
    } catch (err) {
        console.error('Errore nel caricamento di userStats.json:', err);
        userStats = {};
    }
} else {
    fs.writeFileSync(userStatsFile, JSON.stringify({}, null, 2));
}

// Funzione per salvare i dati
function saveUserStats() {
    try {
        fs.writeFileSync(userStatsFile, JSON.stringify(userStats, null, 2));
    } catch (err) {
        console.error('Errore nel salvataggio di userStats.json:', err);
    }
}

// Inizializza utente se non esiste
function initUser(id) {
    if (!userStats[id]) {
        userStats[id] = {
            level: 1,
            xp: 0,
            messages: 0,
            dailyStreak: 0,
            instagram: null
        };
        saveUserStats();
    }
}

// Esempio funzioni ausiliarie (se non le hai gi√†)
function getRank(level) {
    if (level >= 50) return { name: 'Leggenda', emoji: 'üëë' };
    if (level >= 25) return { name: 'Maestro', emoji: 'üí†' };
    if (level >= 10) return { name: 'Esperto', emoji: 'üî•' };
    if (level >= 5)  return { name: 'Apprendista', emoji: '‚≠ê' };
    return { name: 'Novizio', emoji: 'üå±' };
}

function getXPForLevel(level) {
    return 100 + (level * 50);
}

        // Anti-flood
        if (automod?.antiFlood) {
            groupInfo.messageCount = groupInfo.messageCount || {};
            if (!groupInfo.messageCount[userNumber]) groupInfo.messageCount[userNumber] = [];
            
            groupInfo.messageCount[userNumber].push(Date.now());
            groupInfo.messageCount[userNumber] = groupInfo.messageCount[userNumber].filter(t => Date.now() - t < automod.timeWindow * 1000);
            
            if (groupInfo.messageCount[userNumber].length > automod.maxMessages) {
                if (!(await isAdmin(msg, chat))) {
                    try {
                        await msg.delete(true);
                        await msg.reply(`‚ö†Ô∏èüí• *FLOOD RILEVATO!*\n\n@${userNumber} stai inviando troppi messaggi!`);
                        groupInfo.messageCount[userNumber] = [];
                    } catch {}
                }
            }
        }

             

        // ---------------------- COMANDI ----------------------
if (!msg.body || !msg.body.startsWith('.')) return;

const args = msg.body.slice(1).trim().split(/ +/);
const command = (args.shift() || '').toLowerCase();
const text = msg.body.slice(1); // se ti serve il testo intero senza il punto

// ---------- CONTROLLO MODALIT√Ä ADMIN (POSIZIONE CORRETTA) ----------
        if (isGroup && groupData[chat.id._serialized]?.adminMode) {
            const isUserAdmin = await isAdmin(msg, chat); // OK perch√© sei in funzione async
            if (!isUserAdmin && command !== 'modoadmin') return; // esce dall'handler
        }     

// ================= FUNZIONE FALLBACK =================
async function sendListOrFallback(client, to, text, sections, buttonText, title) {
  try {
    const list = new List(text, buttonText, sections, title, 'Scegli un\'opzione');
    await client.sendMessage(to, list);
  } catch (err) {
    // Se il list non √® supportato, invia il testo normale come fallback
    let fallbackText = `${text}\n\nüìÇ *MENU DISPONIBILE:*\n`;
    for (const section of sections) {
      fallbackText += `\n${section.title}\n`;
      for (const row of section.rows) {
        fallbackText += `‚Ä¢ ${row.id} ‚Üí ${row.description}\n`;
      }
    }
    await client.sendMessage(to, fallbackText);
  }
}




// ========== MENU PRINCIPALE ==========
if (['menu', 'help', 'comandi'].includes(command)) {
    const uptime = Math.floor((Date.now() - startTime) / 1000);
    const menuText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü§ñ *BOT WHATSAPP*   ‚ïë
‚ïë  *MENU PRINCIPALE*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã *NAVIGAZIONE RAPIDA:*
Usa i pulsanti sotto o digita i comandi

üéØ *CATEGORIE DISPONIBILI:*
‚Ä¢ \`.moderazione\` - Gestione gruppo üëÆ
‚Ä¢ \`.economia\` - Sistema economico üí∞
‚Ä¢ \`.giochi\` - Giochi e intrattenimento üéÆ
‚Ä¢ \`.fun\` - Comandi divertenti üé™
‚Ä¢ \`.utility\` - Strumenti utili üîß

üìä *INFORMAZIONI:*
‚Ä¢ \`.level\` - Mostra il tuo livello
‚Ä¢ \`.profilo\` - Il tuo profilo completo
‚Ä¢ \`.top\` - Classifiche del gruppo
‚Ä¢ \`.stats\` - Statistiche bot

‚ùì *SUPPORTO:*
‚Ä¢ \`.help [comando]\` - Info su comando
‚Ä¢ \`.info\` - Info dettagliate bot
‚Ä¢ \`.ping\` - Verifica latenza

üí° *SUGGERIMENTO:*
Usa i pulsanti interattivi per una navigazione pi√π veloce!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîß Versione: *2.5 Premium*
‚è∞ Uptime: *${formatUptime(uptime)}*
üë• Utenti attivi: *${Object.keys(userStats).length}*
`;

    const sections = [
        {
            title: 'üëÆ GESTIONE',
            rows: [
                { id: '.moderazione', title: 'üëÆ Moderazione', description: 'Comandi admin completi' },
                { id: '.automod', title: 'üõ°Ô∏è Auto-Moderazione', description: 'Protezione automatica' },
                { id: '.config', title: '‚öôÔ∏è Configurazione', description: 'Impostazioni gruppo' }
            ]
        },
        {
            title: 'üí∞ SISTEMA',
            rows: [
                { id: '.economia', title: 'üí∞ Economia', description: 'Sistema monetario completo' },
                { id: '.giochi', title: 'üéÆ Giochi', description: 'Slot, quiz e altro' },
                { id: '.livelli', title: 'üèÜ Livelli', description: 'Sistema XP e ricompense' }
            ]
        },
        {
            title: 'üéâ SOCIAL',
            rows: [
                { id: '.fun', title: 'üé™ Fun', description: 'Comandi divertenti' },
                { id: '.social', title: 'üí¨ Social', description: 'Interazione utenti' },
                { id: '.utility', title: 'üîß Utility', description: 'Strumenti vari' }
            ]
        }
    ];

    await sendListOrFallback(client, msg.from, menuText, sections, 'üìã Menu Principale', 'ü§ñ Bot WhatsApp');
    return;
}

// ========== MENU MODERAZIONE ==========
else if (command === 'moderazione' || command === 'mod') {
    const modText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üëÆ *MODERAZIONE*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë• *GESTIONE UTENTI:*
‚Ä¢ \`.kick @user\` - Rimuovi utente
‚Ä¢ \`.ban @user\` - Banna permanentemente
‚Ä¢ \`.unban @user\` - Rimuovi ban
‚Ä¢ \`.muta @user [tempo]\` - Silenzia utente
‚Ä¢ \`.smuta @user\` - Rimuovi mute
‚Ä¢ \`.warn @user [motivo]\` - Avvisa utente
‚Ä¢ \`.unwarn @user\` - Rimuovi warn
‚Ä¢ \`.warnings [@user]\` - Vedi warns
‚Ä¢ \`.clearwarns @user\` - Resetta warns

üëë *GESTIONE ADMIN:*
‚Ä¢ \`.p @user\` - Promuovi admin
‚Ä¢ \`.d @user\` - Degrada admin
‚Ä¢ \`.admins\` - Lista admin
‚Ä¢ \`.promote-all\` - Promuovi tutti
‚Ä¢ \`.demote-all\` - Degrada tutti

üõ°Ô∏è *PROTEZIONE:*
‚Ä¢ \`.antilink on/off\` - Blocca link
‚Ä¢ \`.antibot on/off\` - Blocca bot
‚Ä¢ \`.antispam on/off\` - Anti spam
‚Ä¢ \`.antiraid on/off\` - Anti raid
‚Ä¢ \`.antiflood on/off\` - Anti flood
‚Ä¢ \`.slowmode [sec]\` - Rallenta chat

üìù *CONTENUTI:*
‚Ä¢ \`.blocca [parola]\` - Blocca parola
‚Ä¢ \`.sblocca [parola]\` - Sblocca parola
‚Ä¢ \`.listaparole\` - Parole bloccate
‚Ä¢ \`.r\` - Elimina messaggio

‚öôÔ∏è *CONFIGURAZIONE:*
‚Ä¢ \`.regole [testo]\` - Imposta regole
‚Ä¢ \`.vediregole\` - Mostra regole
‚Ä¢ \`.chiudi\` - Solo admin scrivono
‚Ä¢ \`.apri\` - Tutti scrivono
‚Ä¢ \`.lock\` - Blocca impostazioni
‚Ä¢ \`.unlock\` - Sblocca impostazioni
‚Ä¢ \`.setwelcome [msg]\` - Msg benvenuto
‚Ä¢ \`.setgoodbye [msg]\` - Msg addio
‚Ä¢ \`.setmaxwarns [num]\` - Max warn
‚Ä¢ \`.visual on/off\` - Foto visualizzabili una volta
‚Ä¢ \`.link\` - Manda link del gruppo
‚Ä¢ \`.revoke\` - Resetta link del gruppo

üìä *STATISTICHE:*
‚Ä¢ \`.info\` - Info gruppo
‚Ä¢ \`.mutati\` - Lista mutati
‚Ä¢ \`.bannati\` - Lista bannati
‚Ä¢ \`.attivita\` - Attivit√† gruppo
‚Ä¢ \`.logs\` - Ultimi eventi

üéØ *AZIONI RAPIDE:*
‚Ä¢ \`.tag [msg]\` - Tagga tutti
‚Ä¢ \`.hidetag [msg]\` - Tag nascosto
‚Ä¢ \`.purge [num]\` - Elimina messaggi
‚Ä¢ \`.pin\` - Fissa messaggio
‚Ä¢ \`.unpin\` - Rimuovi fissa

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Usa \`.automod\` per configurare la protezione automatica!
`;
    await msg.reply(modText);
    return;
}

// ========== MENU AUTO-MODERAZIONE ==========
if (command === 'automod' || command === 'automoderatore') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    initGroup(chat.id._serialized);
    const g = groupData[chat.id._serialized];
    const automod = automodConfig[chat.id._serialized] || {};
    
    const automodText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üõ°Ô∏è *AUTO-MODERAZIONE*‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

*üìä STATO PROTEZIONI:*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üîó Antilink: ${g.antilink ? '‚úÖ ON' : '‚ùå OFF'}
‚îÇ ü§ñ Antibot: ${g.antiBot ? '‚úÖ ON' : '‚ùå OFF'}
‚îÇ üí• Antispam: ${g.antiSpam ? '‚úÖ ON' : '‚ùå OFF'}
‚îÇ üõ°Ô∏è Antiraid: ${automod.antiRaid ? '‚úÖ ON' : '‚ùå OFF'}
‚îÇ üí• Antiflood: ${automod.antiFlood ? '‚úÖ ON' : '‚ùå OFF'}
‚îÇ ‚è±Ô∏è Slowmode: ${g.slowmode}s
‚îÇ ‚ö†Ô∏è Max Warns: ${g.maxWarns || 3}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

*‚öôÔ∏è CONFIGURAZIONE:*
‚Ä¢ \`.antilink on/off\` - Rimuove link
‚Ä¢ \`.antibot on/off\` - Rimuove bot
‚Ä¢ \`.antispam on/off\` - Blocca spam
‚Ä¢ \`.antiraid on/off\` - Protegge da raid
‚Ä¢ \`.antiflood on/off [msg] [sec]\` - Config flood
‚Ä¢ \`.slowmode [sec]\` - Ritardo messaggi
‚Ä¢ \`.setmaxwarns [num]\` - Warn prima ban

*üìù ESEMPI:*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Antiflood:
‚îÇ \`.antiflood on 5 10\`
‚îÇ (Max 5 msg in 10 sec)
‚îÇ
‚îÇ Slowmode:
‚îÇ \`.slowmode 5\`
‚îÇ (1 msg ogni 5 sec)
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Le protezioni attive rimuovono automaticamente contenuti violanti!
`;
    await msg.reply(automodText);
    return;
}

// ========== COMANDO: .tag / .tagall (gestione testuale + media + sticker) ==========
else if (command === 'tag' || command === 'tagall') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');

    // Recupera il messaggio quotato se presente
    let quotedMsgObj = null;
    if (msg.hasQuotedMsg) {
        try {
            quotedMsgObj = await msg.getQuotedMessage();
        } catch (e) {
            console.log('Errore recupero messaggio quotato:', e);
            quotedMsgObj = null;
        }
    }

    // Se NON ci sono argomenti E NON c'√® un messaggio quotato -> non fare nulla (silenzioso)
    if (args.length === 0 && !quotedMsgObj) {
        return;
    }

    // Raccogli tutti i contatti del gruppo per le menzioni
    const mentions = [];
    try {
        for (let participant of chat.participants) {
            try {
                const jid = participant.id && participant.id._serialized ? participant.id._serialized : participant;
                const contact = await client.getContactById(jid);
                if (contact) mentions.push(contact);
            } catch (e) {
                console.log('Impossibile ottenere contatto durante tag:', participant.id ? participant.id._serialized : participant, e);
            }
        }
    } catch (e) {
        console.error('Errore raccogliendo partecipanti per .tag:', e);
    }

    // Se sono presenti argomenti (".tag ciao") -> invia semplice testo con mentions
    if (args.length > 0) {
        const textToSend = args.join(' ').trim() || 'üì¢';
        try {
            await chat.sendMessage(textToSend, { mentions });
        } catch (err) {
            console.error('Errore invio .tag con testo:', err);
            await msg.reply('‚ùå Errore durante l\'invio del tag.');
        }
        return;
    }

    // Qui: non ci sono argomenti ma c'√® un messaggio quotato -> gestisci in base al tipo
    try {
        // Se il messaggio quotato √® testuale -> invia il testo (senza mostrare la lista di nomi)
        if (quotedMsgObj.type === 'chat' || (typeof quotedMsgObj.body === 'string' && quotedMsgObj.body.trim().length > 0)) {
            const textToSend = quotedMsgObj.body || 'üì¢ Messaggio condiviso';
            await chat.sendMessage(textToSend, { mentions });
            return;
        }

        // Se √® uno sticker -> forward + notifica con mentions (i sticker non supportano caption/mentions)
        if (quotedMsgObj.type === 'sticker') {
            try {
                await quotedMsgObj.forward(chat.id);
                // Notifica breve con mentions (minimale)
                await chat.sendMessage('[Sticker condiviso]', { mentions });
            } catch (e) {
                console.error('Errore forwarding sticker:', e);
                // fallback: invia un messaggio descrittivo con mentions
                await chat.sendMessage('[Sticker condiviso]', { mentions });
            }
            return;
        }

        // Se √® media (image, video, audio, document, ecc.) -> prova a scaricare e reinviare con mentions nella caption
        if (quotedMsgObj.hasMedia) {
            try {
                const media = await quotedMsgObj.downloadMedia();
                // tenta di usare la stessa caption se presente, altrimenti una minima descrizione
                const caption = quotedMsgObj.caption || quotedMsgObj.body || '';
                // Reinvia il media con mentions (whatsapp-web.js supporta caption + mentions su immagini/video/documenti)
                await chat.sendMessage(media, { caption: caption, mentions });
                return;
            } catch (e) {
                console.error('Errore download/reinvio media:', e);
                // fallback: forward + notifica con mentions
                try {
                    await quotedMsgObj.forward(chat.id);
                    await chat.sendMessage('[Media condiviso]', { mentions });
                    return;
                } catch (ee) {
                    console.error('Fallback forward media fallito:', ee);
                    await msg.reply('‚ùå Impossibile condividere il media con mentions.');
                    return;
                }
            }
        }

        // Caso generico (non riconosciuto): invia fallback testuale taggando tutti
        await chat.sendMessage('[Messaggio condiviso]', { mentions });
    } catch (err) {
        console.error('Errore comando .tag (gestione quote/media):', err);
        await msg.reply('‚ùå Errore durante il tag di tutti i membri.');
    }
}

        

// ========== HIDETAG ==========
else if (command === 'hidetag') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    try {
        const text = args.join(' ') || 'üëª *Messaggio nascosto*';
        const mentions = chat.participants.map(p => p.id._serialized);
        
        await chat.sendMessage(text, { mentions });
        await msg.delete(true); // Elimina comando
        
        console.log(`[HIDETAG] Admin ${msg.author} ha inviato messaggio nascosto`);
        
    } catch (err) {
        console.error('Errore hidetag:', err);
        await msg.reply('‚ùå Errore durante l\'invio del messaggio.');
    }
}

// ========== KICK (solo kick, senza ban permanente) ==========
else if (command === 'kick' || command === 'remove') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    if (!await isBotAdmin(chat)) return msg.reply('‚ö†Ô∏è Il bot deve essere admin per rimuovere utenti!');

    const mentioned = await msg.getMentions();
    if (mentioned.length === 0) {
        return msg.reply(
            '‚ö†Ô∏è *Menziona un utente!*\n\n' +
            'üí° *Uso:* `.kick @utente [motivo]`\n' +
            'üìù *Esempio:* `.kick @mario Spam`'
        );
    }

    try {
        const toKick = mentioned[0];
        const toKickId = toKick.id._serialized;
        const toKickNumber = toKickId.split('@')[0];
        const toKickName = await getUserDisplayName(toKickId, chat);
        const reason = args.slice(1).join(' ') || 'Nessun motivo specificato';

        // Verifica se √® admin
        const freshChat = await client.getChatById(chat.id._serialized);
        const participant = freshChat.participants.find(p => p.id._serialized === toKickId);

        if (!participant) {
            return msg.reply('‚ùå Utente non trovato nel gruppo!');
        }

        if (participant.isAdmin || participant.isSuperAdmin) {
            return msg.reply('‚ö†Ô∏è Non posso rimuovere un admin! Degradalo prima con `.d @utente`');
        }

        // Rimuovi (kick) ‚Äî NON aggiungere alla lista dei bannati
        await chat.removeParticipants([toKickId]);

        await msg.reply(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n` +
            `‚ïë  üë¢ *UTENTE RIMOSO*  ‚ïë\n` +
            `‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n` +
            `üë§ *Utente:* ${toKickName}\n` +
            `üì± *Numero:* ${toKickNumber}\n` +
            `üìù *Motivo:* ${reason}\n` +
            `üëÆ *Admin:* ${msg.author.split('@')[0]}\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
            `‚úÖ L'utente √® stato espulso dal gruppo.`
        );

        console.log(`[KICK] ${toKickName} rimosso da ${msg.author}`);

    } catch (err) {
        console.error('Errore kick:', err);
        await msg.reply('‚ùå Errore durante la rimozione. Verifica che:\n‚Ä¢ Il bot sia admin\n‚Ä¢ L\'utente non sia admin\n‚Ä¢ L\'utente sia nel gruppo');
    }
}


// ========== MUTA ==========
else if (command === 'muta' || command === 'mute') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    if (!await isBotAdmin(chat)) return msg.reply('‚ö†Ô∏è Il bot deve essere admin!');
    
    const mentioned = await msg.getMentions();
    if (mentioned.length === 0) {
        return msg.reply(
            '‚ö†Ô∏è *Menziona un utente!*\n\n' +
            'üí° *Uso:*\n' +
            '‚Ä¢ `.muta @utente` - Mute permanente\n' +
            '‚Ä¢ `.muta @utente 30` - Mute 30 minuti\n' +
            '‚Ä¢ `.muta @utente 2h` - Mute 2 ore\n' +
            '‚Ä¢ `.muta @utente 1d` - Mute 1 giorno'
        );
    }
    
    try {
        const toMute = mentioned[0];
        const toMuteId = toMute.id._serialized;
        const toMuteName = await getUserDisplayName(toMuteId, chat);
        
        // Parse tempo (supporta minuti, ore, giorni)
        let muteMinutes = 0;
        const timeArg = args[args.length - 1];
        
        if (timeArg) {
            if (timeArg.endsWith('d')) {
                muteMinutes = parseInt(timeArg) * 24 * 60;
            } else if (timeArg.endsWith('h')) {
                muteMinutes = parseInt(timeArg) * 60;
            } else if (!isNaN(parseInt(timeArg))) {
                muteMinutes = parseInt(timeArg);
            }
        }
        
        initGroup(chat.id._serialized);
        const g = groupData[chat.id._serialized];
        
        // Verifica se gi√† mutato
        if (g.mutedUsers.includes(toMuteId)) {
            return msg.reply(`‚ö†Ô∏è *${toMuteName}* √® gi√† mutato! Usa \`.smuta @utente\` per rimuovere il mute.`);
        }
        
        // Aggiungi a mutati
        g.mutedUsers.push(toMuteId);
        
        let responseText = '';
        
        if (muteMinutes > 0) {
            const unmuteTime = Date.now() + (muteMinutes * 60 * 1000);
            if (!g.muteTime) g.muteTime = {};
            g.muteTime[toMuteId] = unmuteTime;
            
            // Auto-unmute
            setTimeout(async () => {
                try {
                    const idx = g.mutedUsers.indexOf(toMuteId);
                    if (idx !== -1) {
                        g.mutedUsers.splice(idx, 1);
                        delete g.muteTime[toMuteId];
                        saveData();
                        await client.sendMessage(chat.id._serialized, `üîä *${toMuteName}* √® stato automaticamente smutato!`);
                    }
                } catch (err) {
                    console.error('Errore unmute automatico:', err);
                }
            }, muteMinutes * 60 * 1000);
            
            responseText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîá *UTENTE MUTATO*   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Utente:* ${toMuteName}
‚è±Ô∏è *Durata:* ${muteMinutes >= 1440 ? Math.floor(muteMinutes/1440) + ' giorni' : muteMinutes >= 60 ? Math.floor(muteMinutes/60) + ' ore' : muteMinutes + ' minuti'}
üîä *Scadenza:* ${new Date(unmuteTime).toLocaleString('it-IT')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è Tutti i suoi messaggi verranno eliminati automaticamente.
üîä Sar√† smutato automaticamente alla scadenza.`;
        } else {
            responseText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîá *UTENTE MUTATO*   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Utente:* ${toMuteName}
‚è±Ô∏è *Durata:* PERMANENTE ‚àû

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è Tutti i suoi messaggi verranno eliminati automaticamente.
üí° Usa \`.smuta @utente\` per rimuovere il mute.`;
        }
        
        saveData();
        await msg.reply(responseText);
        
        console.log(`[MUTE] ${toMuteName} mutato per ${muteMinutes} minuti da ${msg.author}`);
        
    } catch (err) {
        console.error('Errore muta:', err);
        await msg.reply('‚ùå Errore durante il mute.');
    }
}

// ========== SMUTA ==========
else if (command === 'smuta' || command === 'unmute') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    const mentioned = await msg.getMentions();
    if (mentioned.length === 0) return msg.reply('‚ö†Ô∏è Menziona un utente! Uso: `.smuta @utente`');
    
    try {
        const toUnmuteId = mentioned[0].id._serialized;
        const toUnmuteName = await getUserDisplayName(toUnmuteId, chat);
        
        initGroup(chat.id._serialized);
        const g = groupData[chat.id._serialized];
        const idx = g.mutedUsers.indexOf(toUnmuteId);
        
        if (idx === -1) {
            return msg.reply(`‚ö†Ô∏è *${toUnmuteName}* non √® mutato!`);
        }
        
        g.mutedUsers.splice(idx, 1);
        if (g.muteTime?.[toUnmuteId]) {
            delete g.muteTime[toUnmuteId];
        }
        
        saveData();
        
        await msg.reply(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîä *UTENTE SMUTATO*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Utente:* ${toUnmuteName}
‚úÖ *Status:* Pu√≤ scrivere liberamente

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Il mute √® stato rimosso con successo!`
        );
        
        console.log(`[UNMUTE] ${toUnmuteName} smutato da ${msg.author}`);
        
    } catch (err) {
        console.error('Errore smuta:', err);
        await msg.reply('‚ùå Errore durante lo smute.');
    }
}

// ========== WARN ==========
else if (command === 'warn') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    const mentioned = await msg.getMentions();
    if (mentioned.length === 0) {
        return msg.reply(
            '‚ö†Ô∏è *Menziona un utente!*\n\n' +
            'üí° *Uso:* `.warn @utente [motivo]`\n' +
            'üìù *Esempio:* `.warn @mario Linguaggio inappropriato`'
        );
    }
    
    try {
        const userId = mentioned[0].id._serialized;
        const userName = await getUserDisplayName(userId, chat);
        const reason = args.slice(1).join(' ') || 'Nessun motivo specificato';
        
        initGroup(chat.id._serialized);
        const g = groupData[chat.id._serialized];
        
        g.warnings[userId] = (g.warnings[userId] || 0) + 1;
        
        // Log warning con timestamp
        if (!g.warningHistory) g.warningHistory = {};
        if (!g.warningHistory[userId]) g.warningHistory[userId] = [];
        g.warningHistory[userId].push({
            reason,
            admin: msg.author,
            timestamp: Date.now()
        });
        
        saveData();
        
        const warnCount = g.warnings[userId];
        const maxWarns = g.maxWarns || 3;
        const progressBar = createProgressBar(warnCount, maxWarns, 10);
        
        // Emoji status
        let statusEmoji = '‚ö†Ô∏è';
        if (warnCount >= maxWarns) statusEmoji = 'üî¥';
        else if (warnCount >= maxWarns * 0.7) statusEmoji = 'üü†';
        else if (warnCount >= maxWarns * 0.4) statusEmoji = 'üü°';
        else statusEmoji = 'üü¢';
        
        await msg.reply(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ö†Ô∏è *WARNING ISSUED*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Utente:* ${userName}
üìä *Warn:* ${warnCount}/${maxWarns}
${progressBar}

${statusEmoji} *Status:* ${warnCount >= maxWarns ? 'CRITICO' : warnCount >= maxWarns * 0.7 ? 'PERICOLO' : warnCount >= maxWarns * 0.4 ? 'ATTENZIONE' : 'NORMALE'}

üí¨ *Motivo:*
${reason}

üëÆ *Admin:* ${msg.author.split('@')[0]}
üìÖ *Data:* ${new Date().toLocaleString('it-IT')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${warnCount >= maxWarns ? 'üö® *LIMITE RAGGIUNTO!* Utente verr√† rimosso.' : `‚ö†Ô∏è Ancora *${maxWarns - warnCount} warn* prima della rimozione automatica.`}`
        );
        
        // Auto-kick se limite raggiunto
        if (warnCount >= maxWarns) {
            setTimeout(async () => {
                try {
                    await chat.removeParticipants([userId]);
                    await msg.reply(`üö´ *${userName}* √® stato rimosso automaticamente per aver raggiunto ${maxWarns} warning!`);
                    delete g.warnings[userId];
                    saveData();
                } catch (err) {
                    console.error('Errore auto-kick:', err);
                    await msg.reply('‚ùå Impossibile rimuovere l\'utente. Verifica i permessi del bot.');
                }
            }, 2000);
        }
        
        console.log(`[WARN] ${userName} warned by ${msg.author}: ${reason}`);
        
    } catch (err) {
        console.error('Errore warn:', err);
        await msg.reply('‚ùå Errore durante l\'invio del warning.');
    }
}

// ========== UNWARN ==========
else if (command === 'unwarn') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    const mentioned = await msg.getMentions();
    if (mentioned.length === 0) return msg.reply('‚ö†Ô∏è Menziona un utente! Uso: `.unwarn @utente`');
    
    try {
        const userId = mentioned[0].id._serialized;
        const userName = await getUserDisplayName(userId, chat);
        
        initGroup(chat.id._serialized);
        const g = groupData[chat.id._serialized];
        
        if (!g.warnings[userId] || g.warnings[userId] === 0) {
            return msg.reply(`‚ö†Ô∏è *${userName}* non ha warning attivi!`);
        }
        
        const previousWarns = g.warnings[userId];
        g.warnings[userId]--;
        saveData();
        
        const warnCount = g.warnings[userId];
        const maxWarns = g.maxWarns || 3;
        const progressBar = createProgressBar(warnCount, maxWarns, 10);
        
        await msg.reply(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚úÖ *WARNING RIMOSSO* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Utente:* ${userName}
üìä *Warn precedenti:* ${previousWarns}
üìä *Warn attuali:* ${warnCount}/${maxWarns}
${progressBar}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Un warning √® stato rimosso con successo!`
        );
        
    } catch (err) {
        console.error('Errore unwarn:', err);
        await msg.reply('‚ùå Errore durante la rimozione del warning.');
    }
}

// ========== WARNINGS ==========
else if (command === 'warnings') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    const userId = getUserIdFromMsg(msg);
    const mentioned = await msg.getMentions();
    const targetId = mentioned.length > 0 ? mentioned[0].id._serialized : userId;
    const targetName = mentioned.length > 0 
        ? await getUserDisplayName(targetId, chat)
        : 'Tu';
    
    initGroup(chat.id._serialized);
    const g = groupData[chat.id._serialized];
    
    const warnCount = g.warnings[targetId] || 0;
    const maxWarns = g.maxWarns || 3;
    const progressBar = createProgressBar(warnCount, maxWarns, 15);
    
    // Status con emoji
    let status = '';
    let statusEmoji = '';
    if (warnCount === 0) {
        status = '‚úÖ Nessun warning';
        statusEmoji = 'üü¢';
    } else if (warnCount < maxWarns * 0.4) {
        status = '‚ö†Ô∏è Attenzione';
        statusEmoji = 'üü°';
    } else if (warnCount < maxWarns * 0.7) {
        status = 'üö® Pericolo';
        statusEmoji = 'üü†';
    } else if (warnCount < maxWarns) {
        status = 'üî¥ Critico';
        statusEmoji = 'üî¥';
    } else {
        status = 'üíÄ Limite raggiunto';
        statusEmoji = 'üíÄ';
    }
    
    // Storia warnings (ultimi 3)
    let historyText = '';
    if (g.warningHistory && g.warningHistory[targetId] && g.warningHistory[targetId].length > 0) {
        const history = g.warningHistory[targetId].slice(-3).reverse();
        historyText = '\n\nüìú *ULTIMI WARNING:*\n';
        history.forEach((w, i) => {
            const date = new Date(w.timestamp).toLocaleDateString('it-IT');
            historyText += `${i + 1}. ${w.reason}\n   üëÆ ${w.admin.split('@')[0]} ‚Ä¢ ${date}\n`;
        });
    }
    
    await msg.reply(
        `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üìã *WARNINGS*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Utente:* ${targetName}
üìä *Warn:* ${warnCount}/${maxWarns}
${progressBar}

${statusEmoji} *Status:* ${status}
${warnCount >= maxWarns ? '‚õî *AZIONE:* Prossimo warn = kick automatico' : `üí° *Rimanenti:* ${maxWarns - warnCount} warn disponibili`}${historyText}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${warnCount > 0 ? 'üí° Admin possono usare `.unwarn @utente` per rimuovere un warn' : '‚ú® Record pulito! Nessuna infrazione registrata.'}`
    );
}

// ========== CLEAR WARNINGS ==========
else if (command === 'clearwarns') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    const mentioned = await msg.getMentions();
    if (mentioned.length === 0) return msg.reply('‚ö†Ô∏è Menziona un utente! Uso: `.clearwarns @utente`');
    
    try {
        const userId = mentioned[0].id._serialized;
        const userName = await getUserDisplayName(userId, chat);
        
        initGroup(chat.id._serialized);
        const g = groupData[chat.id._serialized];
        
        const previousWarns = g.warnings[userId] || 0;
        g.warnings[userId] = 0;
        
        // Cancella anche la storia
        if (g.warningHistory && g.warningHistory[userId]) {
            delete g.warningHistory[userId];
        }
        
        saveData();
        
        await msg.reply(
            `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üóëÔ∏è *WARNS CANCELLATI*‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Utente:* ${userName}
üìä *Warn precedenti:* ${previousWarns}
‚ú® *Warn attuali:* 0

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ Tutti i warning e la cronologia sono stati cancellati!
üéâ L'utente ha un record pulito.`
        );
        
        console.log(`[CLEARWARNS] ${userName} warns cleared by ${msg.author}`);
        
    } catch (err) {
        console.error('Errore clearwarns:', err);
        await msg.reply('‚ùå Errore durante la cancellazione dei warning.');
    }
}

// ========== ANTILINK ==========
else if (command === 'antilink') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const status = args[0]?.toLowerCase();
    
    if (!['on', 'off'].includes(status)) {
        initGroup(chat.id._serialized);
        const currentStatus = groupData[chat.id._serialized].antilink ? '‚úÖ ON' : '‚ùå OFF';
        return msg.reply(
            `‚öôÔ∏è üîó *ANTILINK*\n\n` +
            `*Status attuale:* ${currentStatus}\n\n` +
            `*Descrizione:*\n` +
            `Blocca automaticamente messaggi contenenti link esterni.\n\n` +
            `*Uso:* \`.antilink on/off\``
        );
    }
    
    initGroup(chat.id._serialized);
    groupData[chat.id._serialized].antilink = (status === 'on');
    saveData();
    
    await msg.reply(`‚úÖ üîó Antilink ${status === 'on' ? '*ATTIVATO*' : '*DISATTIVATO*'}!\n\n${status === 'on' ? '‚ö†Ô∏è I link esterni verranno rimossi automaticamente.' : 'üìã I link sono ora consentiti.'}`);
}

// ========== ANTIBOT ==========
else if (command === 'antibot') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const status = args[0]?.toLowerCase();
    
    if (!['on', 'off'].includes(status)) {
        initGroup(chat.id._serialized);
        const currentStatus = groupData[chat.id._serialized].antiBot ? '‚úÖ ON' : '‚ùå OFF';
        return msg.reply(
            `‚öôÔ∏è ü§ñ *ANTIBOT*\n\n` +
            `*Status attuale:* ${currentStatus}\n\n` +
            `*Descrizione:*\n` +
            `Previene l'aggiunta di altri bot al gruppo.\n\n` +
            `*Uso:* \`.antibot on/off\``
        );
    }
    
    initGroup(chat.id._serialized);
    groupData[chat.id._serialized].antiBot = (status === 'on');
    saveData();
    
    await msg.reply(`‚úÖ ü§ñ Antibot ${status === 'on' ? '*ATTIVATO*' : '*DISATTIVATO*'}!\n\n${status === 'on' ? '‚ö†Ô∏è I bot non autorizzati verranno rimossi.' : 'üìã √à ora possibile aggiungere altri bot.'}`);
}

// ========== ANTISPAM ==========
else if (command === 'antispam') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const status = args[0]?.toLowerCase();
    if (!['on', 'off'].includes(status)) return msg.reply('‚ö†Ô∏è Usa: `.antispam on/off`');
    
    initGroup(chat.id._serialized);
    groupData[chat.id._serialized].antiSpam = (status === 'on');
    saveData();
    
    await msg.reply(`‚úÖ üí• Anti-spam ${status === 'on' ? '*ATTIVATO*' : '*DISATTIVATO*'}!\n\n${status === 'on' ? '‚ö†Ô∏è Messaggi spam verranno bloccati.' : 'üìã Controllo spam disattivato.'}`);
}

// ========== ANTIFLOOD ==========
else if (command === 'antiflood') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const status = args[0]?.toLowerCase();
    if (!['on', 'off'].includes(status)) {
        return msg.reply(
            '‚ö†Ô∏è *Uso:* `.antiflood on/off [maxMsg] [secondi]`\n\n' +
            'üí° *Esempio:*\n' +
            '`.antiflood on 5 10`\n' +
            '(Max 5 messaggi in 10 secondi)'
        );
    }
    
    initGroup(chat.id._serialized);
    if (!automodConfig[chat.id._serialized]) automodConfig[chat.id._serialized] = {};
    
    automodConfig[chat.id._serialized].antiFlood = (status === 'on');
    
    if (status === 'on') {
        const maxMsg = parseInt(args[1]) || 5;
        const timeWindow = parseInt(args[2]) || 10;
        automodConfig[chat.id._serialized].maxMessages = maxMsg;
        automodConfig[chat.id._serialized].timeWindow = timeWindow;
        
        await msg.reply(
            `‚úÖ üí• Antiflood *ATTIVATO*!\n\n` +
            `üìä *Configurazione:*\n` +
            `‚Ä¢ Max messaggi: *${maxMsg}*\n` +
            `‚Ä¢ Finestra temporale: *${timeWindow}s*\n\n` +
            `‚ö†Ô∏è Utenti che superano il limite riceveranno un warn.`
        );
    } else {
        await msg.reply('‚úÖ üí• Antiflood *DISATTIVATO*!');
    }
    
    saveData();
}

// ========== SLOWMODE ==========
else if (command === 'slowmode') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const seconds = parseInt(args[0]);
    
    if (isNaN(seconds) || seconds < 0) {
        return msg.reply(
            '‚ö†Ô∏è *Uso:* `.slowmode [secondi]`\n\n' +
            'üí° *Esempi:*\n' +
            '‚Ä¢ `.slowmode 5` - 1 msg ogni 5 secondi\n' +
            '‚Ä¢ `.slowmode 0` - Disattiva slowmode'
        );
    }
    
    initGroup(chat.id._serialized);
    groupData[chat.id._serialized].slowmode = seconds;
    saveData();
    
    if (seconds === 0) {
        await msg.reply('‚úÖ ‚è±Ô∏è Slowmode *DISATTIVATO*!');
    } else {
        await msg.reply(
            `‚úÖ ‚è±Ô∏è Slowmode *ATTIVATO*!\n\n` +
            `‚è±Ô∏è *Intervallo:* ${seconds} secondi\n` +
            `üìã Gli utenti possono inviare 1 messaggio ogni ${seconds} secondi.`
        );
    }
}

// ========== BLOCCA PAROLA ==========
else if (command === 'blocca' || command === 'blockword') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const word = args.join(' ').toLowerCase().trim();
    if (!word) return msg.reply('‚ö†Ô∏è Specifica una parola! Uso: `.blocca [parola]`');
    
    initGroup(chat.id._serialized);
    const g = groupData[chat.id._serialized];
    
    if (g.blockedWords.includes(word)) {
        return msg.reply(`‚ö†Ô∏è La parola *"${word}"* √® gi√† bloccata!`);
    }
    
    g.blockedWords.push(word);
    saveData();
    
    await msg.reply(
        `‚úÖ üö´ *PAROLA BLOCCATA*\n\n` +
        `üìù Parola: *"${word}"*\n` +
        `üìä Totale bloccate: *${g.blockedWords.length}*\n\n` +
        `‚ö†Ô∏è Messaggi contenenti questa parola verranno eliminati.`
    );
}

// ========== SBLOCCA PAROLA ==========
else if (command === 'sblocca' || command === 'unblockword') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const word = args.join(' ').toLowerCase().trim();
    if (!word) return msg.reply('‚ö†Ô∏è Specifica una parola! Uso: `.sblocca [parola]`');
    
    initGroup(chat.id._serialized);
    const g = groupData[chat.id._serialized];
    const idx = g.blockedWords.indexOf(word);
    
    if (idx === -1) {
        return msg.reply(`‚ö†Ô∏è La parola *"${word}"* non √® bloccata!`);
    }
    
    g.blockedWords.splice(idx, 1);
    saveData();
    
    await msg.reply(
        `‚úÖ *PAROLA SBLOCCATA*\n\n` +
        `üìù Parola: *"${word}"*\n` +
        `üìä Totale bloccate: *${g.blockedWords.length}*`
    );
}

// ========== LISTA PAROLE ==========
else if (command === 'listaparole') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    
    initGroup(chat.id._serialized);
    const words = groupData[chat.id._serialized].blockedWords;
    
    if (words.length === 0) {
        return msg.reply('üìã *PAROLE BLOCCATE*\n\nNessuna parola bloccata al momento.');
    }
    
    let text = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üö´ *PAROLE BLOCCATE* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä *Totale:* ${words.length}\n\n`;
    
    words.forEach((w, i) => {
        text += `${i + 1}. ${w}\n`;
    });
    
    text += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüí° Usa \`.sblocca [parola]\` per rimuovere una parola.`;
    
    await msg.reply(text);
}

// ========== REGOLE ==========
else if (command === 'regole' || command === 'setrules') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const rules = args.join(' ').trim();
    if (!rules) {
        return msg.reply(
            '‚ö†Ô∏è *Specifica le regole!*\n\n' +
            'üí° *Uso:* `.regole [testo regole]`\n\n' +
            'üìù *Esempio:*\n' +
            '`.regole 1. Rispetta tutti\n2. No spam\n3. No insulti`'
        );
    }
    
    initGroup(chat.id._serialized);
    groupData[chat.id._serialized].rules = rules;
    saveData();
    
    await msg.reply('‚úÖ üìú *Regole impostate con successo!*\n\nGli utenti possono vederle con `.vediregole`');
}

// ========== VEDI REGOLE ==========
else if (command === 'vediregole' || command === 'rules') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    
    initGroup(chat.id._serialized);
    const rules = groupData[chat.id._serialized].rules;
    
    if (!rules) {
        return msg.reply('‚ö†Ô∏è *Nessuna regola impostata!*\n\nGli admin possono impostarle con `.regole`');
    }
    
    await msg.reply(
        `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üìú *REGOLE GRUPPO*   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${rules}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è Il rispetto delle regole √® obbligatorio!`
    );
}

// ========== CHIUDI GRUPPO ==========
else if (command === 'chiudi' || command === 'close') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        await chat.setMessagesAdminsOnly(true);
        await msg.reply(
            `üîí *GRUPPO CHIUSO*\n\n` +
            `üìã Solo gli admin possono scrivere.\n` +
            `üí° Usa \`.apri\` per riaprire il gruppo.`
        );
    } catch (err) {
        console.error('Errore chiudi gruppo:', err);
        await msg.reply('‚ùå Errore! Assicurati che il bot sia admin.');
    }
}

// ========== APRI GRUPPO ==========
else if (command === 'apri' || command === 'open') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        await chat.setMessagesAdminsOnly(false);
        await msg.reply(
            `üîì *GRUPPO APERTO*\n\n` +
            `üìã Tutti possono scrivere.\n` +
            `üí° Usa \`.chiudi\` per limitare ai soli admin.`
        );
    } catch (err) {
        console.error('Errore apri gruppo:', err);
        await msg.reply('‚ùå Errore! Assicurati che il bot sia admin.');
    }
}

// ========== LOCK IMPOSTAZIONI ==========
else if (command === 'lock') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        await chat.setInfoAdminsOnly(true);
        await msg.reply(
            `üîí *IMPOSTAZIONI BLOCCATE*\n\n` +
            `üìã Solo admin possono modificare:\n` +
            `‚Ä¢ Nome gruppo\n` +
            `‚Ä¢ Descrizione\n` +
            `‚Ä¢ Foto profilo\n\n` +
            `üí° Usa \`.unlock\` per sbloccare.`
        );
    } catch (err) {
        console.error('Errore lock:', err);
        await msg.reply('‚ùå Errore! Assicurati che il bot sia admin.');
    }
}

// ========== UNLOCK IMPOSTAZIONI ==========
else if (command === 'unlock') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        await chat.setInfoAdminsOnly(false);
        await msg.reply(
            `üîì *IMPOSTAZIONI SBLOCCATE*\n\n` +
            `üìã Tutti possono modificare le info del gruppo.\n` +
            `üí° Usa \`.lock\` per limitare agli admin.`
        );
    } catch (err) {
        console.error('Errore unlock:', err);
        await msg.reply('‚ùå Errore! Assicurati che il bot sia admin.');
    }
}

// ========== DELETE MESSAGE ==========
else if (command === 'r' || command === 'delete') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        const quoted = await msg.getQuotedMessage();
        if (!quoted) {
            return msg.reply('‚ö†Ô∏è Rispondi al messaggio da eliminare!\n\nüí° Quota il messaggio e poi usa `.r`');
        }
        
        await quoted.delete(true);
        await msg.reply('‚úÖ üóëÔ∏è Messaggio eliminato!');
        
        // Elimina anche il comando dopo 2 secondi
        setTimeout(async () => {
            try {
                await msg.delete(true);
            } catch (e) {
                // Ignora errori
            }
        }, 2000);
        
    } catch (err) {
        console.error('Errore delete:', err);
        await msg.reply('‚ùå Impossibile eliminare. Il messaggio potrebbe essere troppo vecchio o non ho i permessi.');
    }
}

// ========== PROMUOVI ==========
else if (command === 'p' || command === 'promuovi' || command === 'promote') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    if (!await isBotAdmin(chat)) return msg.reply('‚ö†Ô∏è Il bot deve essere admin!');
    
    const mentioned = await msg.getMentions();
    if (!mentioned || mentioned.length === 0) {
        return msg.reply(
            '‚ö†Ô∏è *Menziona almeno un utente!*\n\n' +
            'üí° *Uso:* `.p @utente1 @utente2 ...`\n' +
            'üìù *Esempio:* `.p @mario @luigi`'
        );
    }
    
    const promoted = [];
    const failed = [];
    const botId = client.info?.wid?._serialized;
    
    for (const u of mentioned) {
        const uid = u.id._serialized;
        const display = await getUserDisplayName(uid, chat);
        
        if (botId && uid === botId) {
            failed.push({ display, reason: 'Bot gi√† admin' });
            continue;
        }
        
        try {
            await chat.promoteParticipants([uid]);
            promoted.push(display);
        } catch (err) {
            console.error(`Errore promozione ${display}:`, err);
            failed.push({ display, reason: err.message || 'Errore sconosciuto' });
        }
    }
    
    let reply = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëë *PROMOZIONI*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n`;
    
    if (promoted.length > 0) {
        reply += `‚úÖ *Promossi:* ${promoted.length}\n`;
        promoted.forEach(n => reply += `‚Ä¢ ${n}\n`);
        reply += '\n';
    }
    
    if (failed.length > 0) {
        reply += `‚ö†Ô∏è *Non promossi:* ${failed.length}\n`;
        failed.forEach(f => reply += `‚Ä¢ ${f.display} ‚Äî ${f.reason}\n`);
    }
    
    await msg.reply(reply);
}

// ========== DEGRADA ==========
else if (command === 'd' || command === 'degrada' || command === 'demote') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    if (!await isBotAdmin(chat)) return msg.reply('‚ö†Ô∏è Il bot deve essere admin!');
    
    const mentioned = await msg.getMentions();
    if (!mentioned || mentioned.length === 0) {
        return msg.reply(
            '‚ö†Ô∏è *Menziona almeno un utente!*\n\n' +
            'üí° *Uso:* `.d @utente1 @utente2 ...`\n' +
            'üìù *Esempio:* `.d @mario @luigi`'
        );
    }
    
    const demoted = [];
    const failed = [];
    const botId = client.info?.wid?._serialized;
    
    for (const u of mentioned) {
        const uid = u.id._serialized;
        const display = await getUserDisplayName(uid, chat);
        
        if (botId && uid === botId) {
            failed.push({ display, reason: 'Non posso degradare me stesso' });
            continue;
        }
        
        try {
            await chat.demoteParticipants([uid]);
            demoted.push(display);
        } catch (err) {
            console.error(`Errore degradazione ${display}:`, err);
            failed.push({ display, reason: err.message || 'Errore sconosciuto' });
        }
    }
    
    let reply = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üë§ *DEGRADAZIONI*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n`;
    
    if (demoted.length > 0) {
        reply += `‚úÖ *Degradati:* ${demoted.length}\n`;
        demoted.forEach(n => reply += `‚Ä¢ ${n}\n`);
        reply += '\n';
    }
    
    if (failed.length > 0) {
        reply += `‚ö†Ô∏è *Non degradati:* ${failed.length}\n`;
        failed.forEach(f => reply += `‚Ä¢ ${f.display} ‚Äî ${f.reason}\n`);
    }
    
    await msg.reply(reply);
}

// ========== LISTA ADMIN ==========
else if (command === 'admins') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    
    const admins = chat.participants.filter(p => p.isAdmin || p.isSuperAdmin);
    
    let text = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëë *LISTA ADMIN*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä *Totale:* ${admins.length}\n\n`;
    
    for (let i = 0; i < admins.length; i++) {
        const admin = admins[i];
        const name = await getUserDisplayName(admin.id._serialized, chat);
        const role = admin.isSuperAdmin ? 'üëë' : 'üëÆ';
        text += `${role} ${i + 1}. ${name}\n`;
    }
    
    await msg.reply(text);
}

// ========== LISTA MUTATI ==========
else if (command === 'mutati') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    initGroup(chat.id._serialized);
    const muted = groupData[chat.id._serialized].mutedUsers;
    
    if (muted.length === 0) {
        return msg.reply('üìã *UTENTI MUTATI*\n\nNessun utente mutato al momento.');
    }
    
    let text = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîá *UTENTI MUTATI*   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä *Totale:* ${muted.length}\n\n`;
    
    for (let i = 0; i < muted.length; i++) {
        const name = await getUserDisplayName(muted[i], chat);
        const muteTime = groupData[chat.id._serialized].muteTime?.[muted[i]];
        
        if (muteTime) {
            const remaining = Math.max(0, Math.floor((muteTime - Date.now()) / 60000));
            text += `${i + 1}. ${name}\n   ‚è±Ô∏è Scade tra: ${remaining} minuti\n`;
        } else {
            text += `${i + 1}. ${name}\n   ‚è±Ô∏è Permanente\n`;
        }
    }
    
    await msg.reply(text);
}

// ========== LISTA BANNATI ==========
else if (command === 'bannati') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    initGroup(chat.id._serialized);
    const banned = groupData[chat.id._serialized].bannedUsers;
    
    if (banned.length === 0) { return msg.reply('üìã *UTENTI BANNATI*\n\nNessun utente bannato al momento.');
    }
    
    let text = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üö´ *UTENTI BANNATI*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä *Totale:* ${banned.length}\n\n`;
    
    for (let i = 0; i < banned.length; i++) {
        const name = await getUserDisplayName(banned[i], chat);
        text += `${i + 1}. ${name}\n`;
    }
    
    text += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüí° Usa \`.unban @utente\` per rimuovere un ban.`;
    
    await msg.reply(text);
}

// ========== ATTIVIT√Ä ==========
else if (command === 'attivita' || command === 'activity') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    
    initGroup(chat.id._serialized);
    const g = groupData[chat.id._serialized];
    
    const totalMessages = Object.values(userStats)
        .filter(u => u.messages > 0)
        .reduce((sum, u) => sum + u.messages, 0);
    
    const activeUsers = Object.keys(userStats).filter(id => userStats[id].messages > 0).length;
    const totalUsers = chat.participants.length;
    const activityRate = totalUsers > 0 ? ((activeUsers / totalUsers) * 100).toFixed(1) : 0;
    
    await msg.reply(
        `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üìà *ATTIVIT√Ä GRUPPO* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë• *UTENTI:*
- Totali: *${totalUsers}*
- Attivi: *${activeUsers}* (${activityRate}%)
- Inattivi: *${totalUsers - activeUsers}*

üí¨ *MESSAGGI:*
- Totali: *${totalMessages}*
- Media/utente: *${totalUsers > 0 ? Math.floor(totalMessages / totalUsers) : 0}*

üõ°Ô∏è *MODERAZIONE:*
- Mutati: *${g.mutedUsers.length}* üîá
- Bannati: *${g.bannedUsers.length}* üö´
- Warnings attivi: *${Object.values(g.warnings).reduce((sum, w) => sum + w, 0)}* ‚ö†Ô∏è

‚öôÔ∏è *PROTEZIONI:*
- Antilink: ${g.antilink ? '‚úÖ' : '‚ùå'}
- Antibot: ${g.antiBot ? '‚úÖ' : '‚ùå'}
- Antispam: ${g.antiSpam ? '‚úÖ' : '‚ùå'}
- Slowmode: ${g.slowmode > 0 ? `‚úÖ (${g.slowmode}s)` : '‚ùå'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìÖ *Data:* ${new Date().toLocaleDateString('it-IT')}`
    );
}

// ========== SETMAXWARNS ==========
else if (command === 'setmaxwarns') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const maxWarns = parseInt(args[0]);
    
    if (isNaN(maxWarns) || maxWarns < 1 || maxWarns > 10) {
        return msg.reply(
            '‚ö†Ô∏è *Specifica un numero valido!*\n\n' +
            'üí° *Uso:* `.setmaxwarns [1-10]`\n' +
            'üìù *Esempio:* `.setmaxwarns 3`\n\n' +
            '‚ö†Ô∏è Numero consigliato: 3-5'
        );
    }
    
    initGroup(chat.id._serialized);
    const previousMax = groupData[chat.id._serialized].maxWarns || 3;
    groupData[chat.id._serialized].maxWarns = maxWarns;
    saveData();
    
    await msg.reply(
        `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚öôÔ∏è *MAX WARNS*       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìä *Valore precedente:* ${previousMax}
‚ú® *Nuovo valore:* ${maxWarns}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è Gli utenti verranno rimossi automaticamente dopo ${maxWarns} warning.`
    );
}

// ========== MODO ADMIN ==========
else if (command === 'modoadmin' || command === 'adminmode') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    const status = args[0]?.toLowerCase();
    
    if (!['on', 'off'].includes(status)) {
        initGroup(chat.id._serialized);
        const currentStatus = groupData[chat.id._serialized].adminMode ? '‚úÖ ON' : '‚ùå OFF';
        return msg.reply(
            `‚öôÔ∏è üëë *MODO ADMIN*\n\n` +
            `*Status attuale:* ${currentStatus}\n\n` +
            `*Descrizione:*\n` +
            `Quando attivo, solo gli admin possono usare i comandi del bot.\n\n` +
            `*Uso:* \`.modoadmin on/off\``
        );
    }
    
    initGroup(chat.id._serialized);
    groupData[chat.id._serialized].adminMode = (status === 'on');
    saveData();
    
    await msg.reply(
        `‚úÖ üëë Modo Admin ${status === 'on' ? '*ATTIVATO*' : '*DISATTIVATO*'}!\n\n` +
        `${status === 'on' ? '‚ö†Ô∏è Solo gli admin possono usare i comandi.' : 'üìã Tutti possono usare i comandi base.'}`
    );
}

    



// ========== MENU ECONOMIA ==========
else if (command === 'economia' || command === 'eco') {
    const ecoText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üí∞ *ECONOMIA*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üíµ *GESTIONE SOLDI:*
- \`.soldi [@user]\` - Vedi saldo
- \`.daily\` - Bonus giornaliero
- \`.weekly\` - Bonus settimanale
- \`.monthly\` - Bonus mensile
- \`.lavora\` - Lavora per guadagnare
- \`.crimine\` - Commetti crimine

üè¶ *BANCA:*
- \`.deposita [importo]\` - Deposita in banca
- \`.preleva [importo]\` - Preleva da banca
- \`.banca [@user]\` - Info banca

üí∏ *TRANSAZIONI:*
- \`.regalo @user [importo]\` - Dona soldi
- \`.ruba @user\` - Tenta furto
- \`.scommessa [importo]\` - Scommetti

üìà *INVESTIMENTI:*
- \`.investimento [importo]\` - Investi
- \`.multiplica [importo]\` - Moltiplica
- \`.prestito [importo]\` - Chiedi prestito
- \`.ripaga\` - Ripaga prestito

üè™ *SHOP:*
- \`.shop\` - Negozio oggetti
- \`.compra [id]\` - Compra oggetto
- \`.inventario\` - I tuoi oggetti
- \`.usa [id]\` - Usa oggetto

üìä *CLASSIFICHE:*
- \`.topmoney\` - Pi√π ricchi
- \`.topbank\` - Maggiori risparmi
- \`.toplevel\` - Livelli pi√π alti

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Lavora, investi e diventa il pi√π ricco del gruppo!
`;
    await msg.reply(ecoText);
    return;
}

// ========== MENU GIOCHI ==========
else if (command === 'giochi' || command === 'games') {
    const gamesText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üéÆ *GIOCHI*          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üé≤ *GIOCHI CASUALI:*
- \`.dado\` - Lancia dado
- \`.moneta\` - Testa o croce
- \`.8ball [domanda]\` - Palla magica
- \`.scelta op1|op2\` - Scelta random

üé∞ *CASINO:*
- \`.slot [bet]\` - Slot machine
- \`.blackjack [bet]\` - Blackjack
- \`.roulette [bet] [num/col]\` - Roulette
- \`.rps [scelta]\` - Morra cinese

üß† *QUIZ & TRIVIA:*
- \`.quiz\` - Quiz random
- \`.trivia\` - Domanda trivia
- \`.math\` - Matematica veloce
- \`.indovina\` - Indovina numero
- \`.indovinachi\` - Indovina personaggio

üéØ *GIOCHI MULTIPLAYER:*
- \`.tictactoe @user\` - Tris
- \`.sfida @user\` - Sfida utente
- \`.memory\` - Gioco memoria
- \`.impiccato\` - Impiccato

‚ù§Ô∏è *AMORE & SOCIAL:*
- \`.amore [@user]\` - Affinit√†
- \`.ship @user1 @user2\` - Shippa
- \`.creacoppia\` - Coppia random

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Gioca e guadagna XP per salire di livello!
`;
    await msg.reply(gamesText);
    return;
}

// ========== MENU FUN ==========
else if (command === 'fun' || command === 'divertimento') {
    const funText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üé™ *FUN & GIOCHI*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üïπÔ∏è *GIOCHI VELOCI:*
- \`.rps [scelta]\` - Morra cinese
- \`.slot\` - Slot machine
- \`.indovina [num]\` - Indovina numero (1-100)
- \`.8ball [domanda]\` - Palla magica
- \`.scelta op1|op2\` - Scegli tra opzioni
- \`.dado\` - Lancia dado (1-6)
- \`.moneta\` - Lancia moneta
- \`.grattaevinci\` - Gratta e vinci
- \`.lotteria\` - Numeri fortunati
- \`.setig\` - Setta l instagram (admin)
- \`.setuserig\` - Setta l instagram di un utente (admin)


üÉè *CASINO & CARTE:*
- \`.blackjack\` - Blackjack vs bot
- \`.roulette [color/num]\` - Roulette
- \`.poker\` - Mano di poker
- \`.bingo\` - Cartella bingo
- \`.scommessa [importo]\` - Scommetti

üß† *INTELLETTO:*
- \`.quiz\` - Quiz a scelta multipla
- \`.trivia\` - Fatto casuale
- \`.math\` - Domanda matematica
- \`.enigma\` - Indovinello
- \`.parola\` - Anagramma

üíò *AMORE & ROMANTICO:*
- \`.ship @user1 @user2\` - Compatibilit√†
- \`.creacoppia\` - Coppia random
- \`.amore\` - Citazione romantica
- \`.bacio @user\` - Bacio virtuale
- \`.abbraccio @user\` - Abbraccio
- \`.appuntamento @user\` - Chiedi appuntamento
- \`.complimento @user\` - Complimento
- \`.lovetest @user\` - Test amore
- \`.cuore\` - ASCII art cuore
- \`.rosarossa @user\` - Regala rosa
- \`.poesia\` - Poesia d'amore
- \`.dedica @user [testo]\` - Dedica
- \`.matrimonio @user\` - Proposta
- \`.lettera @user\` - Lettera d'amore
- \`.serenata @user\` - Serenata

üî• *PICCANTE & SPICY:*
- \`.obbligo\` - Obbligo os√©
- \`.verita\` - Verit√† piccante
- \`.osare @user\` - Sfida piccante
- \`.spin\` - Gira la bottiglia
- \`.flirt @user\` - Frase approccio
- \`.hotrate @user\` - Vota hotness (1-10)
- \`.seduzione @user\` - Tecnica seduzione
- \`.wink @user\` - Occhiolino
- \`.sussurro @user [testo]\` - Sussurro
- \`.piccante\` - Fatto piccante
- \`.desiderio\` - Desiderio segreto
- \`.fantasia\` - Scenario spicy
- \`.gioco7minuti @user\` - 7 minuti paradiso
- \`.spogliarello\` - Strip virtuale
- \`.dirty\` - Domanda sporca
- \`.naughty @user\` - Messaggio birichino
- \`.temperatura @user\` - Temperatura tra voi
- \`.chimica @user\` - Chimica fisica (%)
- \`.attrazione @user\` - Livello attrazione
- \`.tentazione\` - Frase tentatrice

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Digita \`.fun2\` per altri comandi!
üéØ Divertiti responsabilmente!
‚ö†Ô∏è I comandi piccanti sono per 18+
`;

    await msg.reply(funText);
}

// ========== MENU FUN 2 ==========
else if (command === 'fun2') {
    const funText2 = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üé™ *FUN & GIOCHI* (2) ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üé≠ *SOCIAL & ACTION:*
- \`.schiaffo @user\` - Schiaffo virtuale
- \`.poke @user\` - Stuzzica
- \`.pat @user\` - Carezza
- \`.feed @user\` - Dai da mangiare
- \`.tickle @user\` - Solletico
- \`.punch @user\` - Pugno scherzoso
- \`.kill @user\` - Uccisione comica
- \`.slap @user\` - Schiaffone
- \`.highfive @user\` - Batti il cinque

üé≤ *RANDOM & GENERATORI:*
- \`.nome\` - Nome casuale
- \`.nickname\` - Nickname divertente
- \`.scusa\` - Scusa random
- \`.insulto @user\` - Insulto comico
- \`.pickup\` - Frase rimorchio cringe
- \`.fatto\` - Fatto interessante
- \`.consiglio\` - Consiglio del giorno
- \`.fortuna\` - Predizione fortuna
- \`.personalita\` - Analisi personalit√†
- \`.superpotere\` - Superpotere assegnato
- \`.lavoro\` - Lavoro futuro
- \`.animale\` - Animale spirito guida

üéâ *PARTY & DIVERTENTE:*
- \`.festa\` - Festa virtuale
- \`.karaoke\` - Canzone karaoke
- \`.balla\` - GIF ballo
- \`.meme\` - Meme del giorno
- \`.joke\` - Barzelletta
- \`.roast @user\` - Roast comico
- \`.vibe\` - Vibe check
- \`.mood\` - Umore di oggi
- \`.aesthetic\` - Aesthetic casuale
- \`.zodiac\` - Oroscopo del giorno

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Digita \`.fun\` per tornare al menu principale!
üéØ Divertiti e usa con rispetto!
`;

    await msg.reply(funText2);
}


// ========== INFO GRUPPO ==========
else if (command === 'info') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    
    try {
        const groupMetadata = chat;
        const adminsCount = groupMetadata.participants.filter(p => p.isAdmin || p.isSuperAdmin).length;
        const creationDate = groupMetadata.createdAt ? new Date(groupMetadata.createdAt * 1000).toLocaleDateString('it-IT') : 'Sconosciuta';
        
        initGroup(chat.id._serialized);
        const g = groupData[chat.id._serialized];
        
        let infoText = `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ÑπÔ∏è *INFO GRUPPO*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìù *DETTAGLI:*
- Nome: *${groupMetadata.name}*
- Creato: *${creationDate}*
- Descrizione: ${groupMetadata.description || 'Nessuna'}

üë• *MEMBRI:*
- Totali: *${groupMetadata.participants.length}*
- Admin: *${adminsCount}*
- Membri: *${groupMetadata.participants.length - adminsCount}*

üõ°Ô∏è *SICUREZZA:*
- Antilink: ${g.antilink ? '‚úÖ' : '‚ùå'}
- Antibot: ${g.antiBot ? '‚úÖ' : '‚ùå'}
- Antispam: ${g.antiSpam ? '‚úÖ' : '‚ùå'}
- Slowmode: ${g.slowmode > 0 ? `‚úÖ (${g.slowmode}s)` : '‚ùå'}
- Max Warns: *${g.maxWarns || 3}*

üìä *STATISTICHE:*
- Mutati: *${g.mutedUsers.length}*
- Bannati: *${g.bannedUsers.length}*
- Parole bloccate: *${g.blockedWords.length}*
- Regole: ${g.rules ? '‚úÖ' : '‚ùå'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§ñ Bot gestito da stocazzo`;
        
        await msg.reply(infoText);
        
    } catch (err) {
        console.error('Errore info gruppo:', err);
        await msg.reply('‚ùå Errore nel recuperare le informazioni del gruppo.');
    }
}

        else if (command === 'setmaxwarns') {
            if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
            if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
            const maxWarns = parseInt(args[0]);
            if (isNaN(maxWarns) || maxWarns < 1) return msg.reply('‚ö†Ô∏è Usa: .setmaxwarns [numero]');
            initGroup(chat.id._serialized);
            groupData[chat.id._serialized].maxWarns = maxWarns;
            saveData();
            await msg.reply(`‚úÖ ‚ö†Ô∏è Max warn impostato a *${maxWarns}*!`);
        }

        // ========== COMANDI ECONOMIA ==========
        else if (command === 'soldi' || command === 'balance' || command === 'bal') {
            initUser(userId);
            const bal = economy[userId];
            await msg.reply(`üí∞ *IL TUO PORTAFOGLIO*\n\nüíµ Contanti: *${bal.money}* coins\nüè¶ Banca: *${bal.bank}* coins\nüíé Totale: *${bal.money + bal.bank}* coins`);
        }

        else if (command === 'daily') {
            initUser(userId);
            const now = nowSeconds();
            const cooldown = 24 * 60 * 60;
            if (now - economy[userId].lastDaily < cooldown) {
                const remaining = cooldown - (now - economy[userId].lastDaily);
                const h = Math.floor(remaining / 3600);
                const m = Math.floor((remaining % 3600) / 60);
                return msg.reply(`‚è≥ Gi√† riscattato! Torna tra *${h}h ${m}m*.`);
            }
            const amount = 200 + Math.floor(Math.random() * 201);
            economy[userId].money += amount;
            economy[userId].lastDaily = now;
            saveData();
            await msg.reply(`‚úÖ *DAILY RISCATTATO!* üéâ\n\nHai ricevuto *${amount}* coins!`); 
        }

        else if (command === 'weekly') {
            initUser(userId);
            const now = nowSeconds();
            const cooldown = 7 * 24 * 60 * 60;
            if (now - economy[userId].lastWeekly < cooldown) {
                const remaining = cooldown - (now - economy[userId].lastWeekly);
                const d = Math.floor(remaining / 86400);
                const h = Math.floor((remaining % 86400) / 3600);
                return msg.reply(`‚è≥ Gi√† riscattato! Torna tra *${d}g ${h}h*.`);
            }
            const amount = 1000 + Math.floor(Math.random() * 1001);
            economy[userId].money += amount;
            economy[userId].lastWeekly = now;
            saveData();
            await msg.reply(`‚úÖ *WEEKLY RISCATTATO!* üéâ\n\nHai ricevuto *${amount}* coins!`);
        }

        else if (command === 'monthly') {
            initUser(userId);
            const now = nowSeconds();
            const cooldown = 30 * 24 * 60 * 60;
            if (now - economy[userId].lastMonthly < cooldown) {
                const remaining = cooldown - (now - economy[userId].lastMonthly);
                const d = Math.floor(remaining / 86400);
                return msg.reply(`‚è≥ Gi√† riscattato! Torna tra *${d}g*.`);
            }
            const amount = 3000 + Math.floor(Math.random() * 2001);
            economy[userId].money += amount;
            economy[userId].lastMonthly = now;
            saveData();
            await msg.reply(`‚úÖ *MONTHLY RISCATTATO!* üéâ\n\nHai ricevuto *${amount}* coins!`);
        }

        // ========== LAVORO & CRIMINE ==========
        else if (command === 'lavora') {
            initUser(userId);
            const now = nowSeconds();
            const cooldown = 60 * 60; // 1 ora
            if (now - economy[userId].lastWork < cooldown) {
                const remaining = cooldown - (now - economy[userId].lastWork);
                const m = Math.floor(remaining / 60);
                return msg.reply(`‚è≥ Hai gi√† lavorato! Torna tra *${m}m*.`);
            }
            const earnings = 50 + Math.floor(Math.random() * 201);
            economy[userId].money += earnings;
            economy[userId].lastWork = now;
            saveData();
            await msg.reply(`üíº Hai lavorato e guadagnato *${earnings}* coins!`);
        }

        else if (command === 'crimine') {
            initUser(userId);
            const now = nowSeconds();
            const cooldown = 2 * 60 * 60; // 2 ore
            if (now - economy[userId].lastCrime < cooldown) {
                const remaining = cooldown - (now - economy[userId].lastCrime);
                const m = Math.floor(remaining / 60);
                return msg.reply(`‚è≥ Hai gi√† tentato un crimine! Torna tra *${m}m*.`);
            }
            const success = Math.random() < 0.45;
            economy[userId].lastCrime = now;
            if (success) {
                const loot = 200 + Math.floor(Math.random() * 801);
                economy[userId].money += loot;
                saveData();
                await msg.reply(`üòà *CRIMINE RIESCIUTO!* Hai guadagnato *${loot}* coins!`);
            } else {
                const fine = Math.min(economy[userId].money, 150 + Math.floor(Math.random() * 351));
                economy[userId].money -= fine;
                saveData();
                await msg.reply(`üöî *FALLITO!* Sei stato beccato e hai perso *${fine}* coins come multa!`);
            }
        }

        else if (command === 'ruba') {
            if (!isGroup) return msg.reply('‚ö†Ô∏è Usa questo comando in un gruppo menzionando un utente.');
            const mentioned = await msg.getMentions();
            if (mentioned.length === 0) return msg.reply('‚ö†Ô∏è Menziona un utente da cui rubare!');
            const target = mentioned[0];
            const targetId = target.id._serialized;
            initUser(userId);
            initUser(targetId);
            const now = nowSeconds();
            const cooldown = 30 * 60; // 30 minuti
            if (now - economy[userId].lastRob < cooldown) {
                const remaining = cooldown - (now - economy[userId].lastRob);
                const m = Math.floor(remaining / 60);
                return msg.reply(`‚è≥ Hai gi√† tentato di rubare! Torna tra *${m}m*.`);
            }
            economy[userId].lastRob = now;
            const success = Math.random() < 0.4;
            if (success && economy[targetId].money > 0) {
                const amount = Math.min(economy[targetId].money, 100 + Math.floor(Math.random() * 401));
                economy[targetId].money -= amount;
                economy[userId].money += amount;
                saveData();
                await msg.reply(`üïµÔ∏è‚Äç‚ôÇÔ∏è Rubato con successo *${amount}* coins da *${target.pushname || target.number}*!`);
            } else {
                const penalty = Math.min(economy[userId].money, 50 + Math.floor(Math.random() * 151));
                economy[userId].money -= penalty;
                saveData();
                await msg.reply(`üö® Fallito! Sei stato scoperto e hai perso *${penalty}* coins come penalit√†.`);
            }
        }

        else if (command === 'cerca') {
            initUser(userId);
            const now = nowSeconds();
            const found = Math.random() < 0.6;
            if (!found) {
                await msg.reply('üîé Hai cercato ma non hai trovato nulla di interessante.');
                return;
            }
            const items = ['moneta d\'argento', 'bottiglia', 'vecchio telefono', 'chiave', 'gemma', 'oggetto raro'];
            const item = items[Math.floor(Math.random() * items.length)];
            const coins = 20 + Math.floor(Math.random() * 181);
            economy[userId].money += coins;
            economy[userId].inventory.push(item);
            saveData();
            await msg.reply(`üîé Hai trovato *${item}* e *${coins}* coins!`);
        }

        // ========== BANCA & TRANSAZIONI ==========
        else if (command === 'deposita' || command === 'deposit') {
            initUser(userId);
            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Usa: .deposita [amt]');
            if (economy[userId].money < amount) return msg.reply('‚ö†Ô∏è Non hai abbastanza contanti!');
            economy[userId].money -= amount;
            economy[userId].bank += amount;
            saveData();
            await msg.reply(`üè¶ Depositate *${amount}* coins in banca!`);
        }

        else if (command === 'preleva' || command === 'withdraw') {
            initUser(userId);
            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Usa: .preleva [amt]');
            if (economy[userId].bank < amount) return msg.reply('‚ö†Ô∏è Non hai abbastanza nella banca!');
            economy[userId].bank -= amount;
            economy[userId].money += amount;
            saveData();
            await msg.reply(`üíµ Prelevati *${amount}* coins dalla banca!`);
        }

        else if (command === 'prestito') {
            initUser(userId);
            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Usa: .prestito [amt]');
            // semplice prestito con interesse fisso 10%
            const interest = Math.ceil(amount * 0.10);
            economy[userId].money += amount;
            economy[userId].debt = (economy[userId].debt || 0) + amount + interest;
            saveData();
            await msg.reply(`üí≥ Prestito concesso: *${amount}* coins. Dovrai ripagare *${amount + interest}* coins (interesse 10%).`);
        }

        else if (command === 'ripaga') {
            initUser(userId);
            const debt = economy[userId].debt || 0;
            if (debt === 0) return msg.reply('‚úÖ Non hai debiti da ripagare!');
            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Usa: .ripaga [amt]');
            if (economy[userId].money < amount) return msg.reply('‚ö†Ô∏è Non hai abbastanza contanti!');
            economy[userId].money -= amount;
            economy[userId].debt = Math.max(0, debt - amount);
            saveData();
            await msg.reply(`‚úÖ Hai ripagato *${amount}* coins. Debito rimanente: *${economy[userId].debt}* coins.`);
        }

        else if (command === 'investimento' || command === 'invest') {
            initUser(userId);
            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Usa: .investimento [amt]');
            if (economy[userId].money < amount) return msg.reply('‚ö†Ô∏è Non hai abbastanza contanti!');
            economy[userId].money -= amount;
            // semplice investimento rischio/ricompensa
            const success = Math.random() < 0.6;
            if (success) {
                const profit = Math.ceil(amount * (0.10 + Math.random() * 0.4)); // 10% - 50%
                economy[userId].money += amount + profit;
                saveData();
                await msg.reply(`üìà Investimento riuscito! Guadagni *${profit}* coins (totale restituito *${amount + profit}*).`);
            } else {
                saveData();
                await msg.reply(`üìâ Investimento fallito! Hai perso *${amount}* coins.`);
            }
        }

        // ========== REGALI, SCOMMESSE & MULTIPLICA ==========
        else if (command === 'regalo') {
            initUser(userId);
            const mentioned = await msg.getMentions();
            if (mentioned.length === 0) return msg.reply('‚ö†Ô∏è Menziona un utente e specifica un ammontare: .regalo @user [amt]');
            const amount = parseInt(args[1]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Importo non valido!');
            if (economy[userId].money < amount) return msg.reply('‚ö†Ô∏è Non hai abbastanza contanti!');
            const target = mentioned[0];
            initUser(target.id._serialized);
            economy[userId].money -= amount;
            economy[target.id._serialized].money += amount;
            saveData();
            await msg.reply(`üéÅ Hai regalato *${amount}* coins a *${target.pushname || target.number}*!`);
        }

        else if (command === 'scommessa' || command === 'bet') {
            initUser(userId);
            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Usa: .scommessa [amt]');
            if (economy[userId].money < amount) return msg.reply('‚ö†Ô∏è Non hai abbastanza contanti!');
            const win = Math.random() < 0.48;
            economy[userId].money -= amount;
            if (win) {
                const winnings = amount * (1 + Math.floor(Math.random() * 3)); // raddoppia/triplica...
                economy[userId].money += winnings;
                saveData();
                await msg.reply(`üé∞ Hai vinto! Ricevi *${winnings}* coins!`);
            } else {
                saveData();
                await msg.reply(`üòû Hai perso *${amount}* coins. Ritenta!`);
            }
        }

        else if (command === 'multiplica') {
            initUser(userId);
            const amount = parseInt(args[0]);
            if (isNaN(amount) || amount <= 0) return msg.reply('‚ö†Ô∏è Usa: .multiplica [amt]');
            if (economy[userId].money < amount) return msg.reply('‚ö†Ô∏è Non hai abbastanza contanti!');
            economy[userId].money -= amount;
            const factor = Math.random();
            if (factor < 0.5) {
                saveData();
                return msg.reply('üí• Tentativo fallito! Hai perso il tuo investimento.');
            }
            const gained = Math.floor(amount * (1 + factor * 3)); // possibile grande guadagno
            economy[userId].money += gained;
            saveData();
            await msg.reply(`‚ú® Successo! Il tuo investimento √® diventato *${gained}* coins!`);
        }

        // ========== NEGOZIO ==========
        else if (command === 'shop') {
            const shopItems = [
                { id: 'pacciugo', name: 'Pacciugo', price: 500, desc: 'Aumenta XP' },
                { id: 'scudo', name: 'Scudo', price: 1200, desc: 'Protezione da furti' },
                { id: 'lucky', name: 'Lucky Charm', price: 800, desc: 'Aumenta fortuna' }
            ];
            let text = 'üõí *NEGOZIO*\n\n';
            shopItems.forEach(i => {
                text += `‚Ä¢ ${i.name} - ${i.price} coins ‚Äî ${i.desc}\n`;
            });
            text += '\nUsa: .compra [nome]';
            await msg.reply(text);
        }

        else if (command === 'compra') {
            initUser(userId);
            const itemName = args.join(' ').toLowerCase();
            if (!itemName) return msg.reply('‚ö†Ô∏è Usa: .compra [nome]');
            const catalog = {
                'pacciugo': { price: 500 },
                'scudo': { price: 1200 },
                'lucky charm': { price: 800, key: 'lucky' },
                'lucky': { price: 800 }
            };
            const item = catalog[itemName];
            if (!item) return msg.reply('‚ö†Ô∏è Articolo non trovato!');
            if (economy[userId].money < item.price) return msg.reply('‚ö†Ô∏è Non hai abbastanza contanti!');
            economy[userId].money -= item.price;
            economy[userId].inventory.push(itemName);
            saveData();
            await msg.reply(`‚úÖ Hai comprato *${itemName}* per *${item.price}* coins!`);
        }

        else if (command === 'vendi') {
            initUser(userId);
            const itemName = args.join(' ').toLowerCase();
            if (!itemName) return msg.reply('‚ö†Ô∏è Usa: .vendi [nome]');
            const idx = economy[userId].inventory.indexOf(itemName);
            if (idx === -1) return msg.reply('‚ö†Ô∏è Non possiedi questo oggetto!');
            // prezzo di vendita: 50% del valore base (semplice)
            const basePrices = { 'pacciugo': 500, 'scudo': 1200, 'lucky charm': 800, 'lucky': 800 };
            const price = Math.floor((basePrices[itemName] || 100) * 0.5);
            economy[userId].inventory.splice(idx, 1);
            economy[userId].money += price;
            saveData();
            await msg.reply(`üí∞ Hai venduto *${itemName}* per *${price}* coins.`);
        }

        else if (command === 'usa') {
            initUser(userId);
            const itemName = args.join(' ').toLowerCase();
            if (!itemName) return msg.reply('‚ö†Ô∏è Usa: .usa [nome]');
            const idx = economy[userId].inventory.indexOf(itemName);
            if (idx === -1) return msg.reply('‚ö†Ô∏è Non possiedi questo oggetto!');
            // applica effetto semplice
            economy[userId].inventory.splice(idx, 1);
            if (itemName.includes('pacciugo')) {
                addXP(userId, 50);
                saveData();
                return msg.reply('‚ú® Hai usato Pacciugo! Hai ricevuto +50 XP.');
            } else if (itemName.includes('scudo')) {
                economy[userId].shield = (economy[userId].shield || 0) + 1;
                saveData();
                return msg.reply('üõ°Ô∏è Hai attivato uno Scudo! Protezione extra attiva.');
            } else if (itemName.includes('lucky')) {
                economy[userId].luck = (economy[userId].luck || 0) + 1;
                saveData();
                return msg.reply('üçÄ Lucky Charm attivato! Fortuna aumentata.');
            } else {
                saveData();
                return msg.reply(`‚úÖ Hai usato *${itemName}* (nessun effetto speciale definito).`);
            }
        }

        // ========== CLASSIFICHE ==========
        else if (command === 'top') {
            // mostra i top per saldo totale (semplice: ordina economy)
            const arr = Object.keys(economy).map(k => ({ id: k, total: (economy[k].money || 0) + (economy[k].bank || 0) }));
            arr.sort((a, b) => b.total - a.total);
            const top = arr.slice(0, 10);
            let text = 'üèÜ *TOP RICCHI* (totale coins)\n\n';
            for (let i = 0; i < top.length; i++) {
                text += `${i + 1}. ${top[i].id.split('@')[0]} ‚Äî ${top[i].total}\n`;
            }
            await msg.reply(text);
        }

        // ========== UTILITY & INFO ==========
        else if (command === 'ping') {
            const latency = Date.now() - msg.timestamp * 1000;
            await msg.reply(`üèì Pong!\nLatenza stimata: *${latency}ms*`);
        }

        else if (command === 'uptime') {
            await msg.reply(`‚è∞ Uptime: *${formatTime(Math.floor((Date.now() - startTime) / 1000))}*`);
        }

        else if (command === 'info' || command === 'infobot') {
            const memUsage = process.memoryUsage();
            const text = `ü§ñ *INFO BOT*\n\nVersione: 2.0 Premium\nUptime: ${formatTime(Math.floor((Date.now() - startTime) / 1000))}\nMemoria (rss): ${Math.round(memUsage.rss / 1024 / 1024)} MB\nGruppi attivi: ${Object.keys(groupData).length}\nUtenti registrati: ${Object.keys(userStats).length}`;
            await msg.reply(text);
        }

        else if (command === 'stato') {
            await msg.reply('üü¢ Bot operativo e pronto a rispondere!');
        }

        else if (command === 'qr') {
            // genera qr del testo dato o del numero
            const text = args.join(' ') || 'https://wa.me/';
            try {
                const qrBuffer = await qrcode.toDataURL(text);
                const media = MessageMedia.fromDataURL(qrBuffer);
                await client.sendMessage(msg.from, media, { caption: `üì± QR per: ${text}` });
            } catch (e) {
                await msg.reply('‚ùå Errore nella generazione del QR.');
            }
        }

        // ========== LINK GRUPPO ==========
else if (command === 'link' || command === 'invite') {
    if (!isGroup) {
        return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
    }
    
    if (!await isBotAdmin(chat)) {
        return msg.reply('‚ö†Ô∏è Il bot deve essere admin per ottenere il link del gruppo!');
    }
    
    try {
        // Ottieni il codice di invito del gruppo
        const inviteCode = await chat.getInviteCode();
        const inviteLink = `https://chat.whatsapp.com/${inviteCode}`;
        
        // Genera QR code (usa un servizio API per QR code)
        const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${encodeURIComponent(inviteLink)}`;
        
        const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîó *LINK GRUPPO*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë• *Gruppo:* ${chat.name}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîó *Link di invito:*
${inviteLink}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì± *Come usarlo:*
- Copia e condividi il link
- Scansiona il QR code qui sotto
- Valido fino alla revoca

‚ö†Ô∏è *Attenzione:*
Chiunque abbia questo link pu√≤
entrare nel gruppo!`;

        // Invia il messaggio
        await msg.reply(response);
        
        // Scarica e invia il QR code
        const axios = require('axios');
        const { MessageMedia } = require('whatsapp-web.js');
        
        const qrResponse = await axios.get(qrCodeUrl, { responseType: 'arraybuffer' });
        const qrMedia = new MessageMedia(
            'image/png',
            Buffer.from(qrResponse.data).toString('base64'),
            'qrcode.png'
        );
        
        await chat.sendMessage(qrMedia, {
            caption: `üì≤ *QR CODE GRUPPO*\n\n‚ú® Scansiona per entrare nel gruppo!\n\nüîó ${chat.name}`
        });
        
        console.log(`[LINK] Link gruppo richiesto in ${chat.name}`);
        
    } catch (error) {
        console.error('Errore generazione link:', error);
        await msg.reply('‚ùå Errore durante la generazione del link! Assicurati che il bot sia admin.');
    }
}

// ========== REVOKE LINK ==========
else if (command === 'revoke' || command === 'resetlink') {
    if (!isGroup) {
        return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
    }
    
    if (!await isAdmin(msg, chat)) {
        return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    }
    
    if (!await isBotAdmin(chat)) {
        return msg.reply('‚ö†Ô∏è Il bot deve essere admin per revocare il link!');
    }
    
    try {
        // Revoca il vecchio link e ne genera uno nuovo
        await chat.revokeInvite();
        
        const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üîÑ *LINK REVOCATO*   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚úÖ *Link precedente revocato!*

Il vecchio link non funziona pi√π.
√à stato generato un nuovo link.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° Usa \`.link\` per ottenere
il nuovo link di invito!

üëÆ Revocato da: ${msg._data.notifyName || 'Admin'}`;
        
        await msg.reply(response);
        
        console.log(`[REVOKE] Link revocato in ${chat.name} da ${msg._data.notifyName}`);
        
    } catch (error) {
        console.error('Errore revoca link:', error);
        await msg.reply('‚ùå Errore durante la revoca del link!');
    }
}

    // ========== VISUAL MODE ==========
else if (command === 'visual') {
    if (!isGroup) {
        return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
    }
    
    if (!await isAdmin(msg, chat)) {
        return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    }
    
    const action = args[0]?.toLowerCase();
    
    if (!action || !['on', 'off'].includes(action)) {
        return msg.reply(
            '‚ö†Ô∏è *Uso comando:*\n\n' +
            'üí° Attiva/disattiva modalit√† visual\n\n' +
            'üìù *Esempio:*\n' +
            '‚Ä¢ `.visual on` - Attiva (solo foto 1 visual)\n' +
            '‚Ä¢ `.visual off` - Disattiva\n\n' +
            'üìä *Stato attuale:* ' + (groupInfo.visualMode ? '‚úÖ ON' : '‚ùå OFF')
        );
    }
    
    groupInfo.visualMode = (action === 'on');
    saveData();
    
    const status = groupInfo.visualMode ? 'attivata ‚úÖ' : 'disattivata ‚ùå';
    
    const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëÅÔ∏è *VISUAL MODE*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üì∏ Modalit√† visual ${status}

${groupInfo.visualMode ? '‚ö†Ô∏è *Regola attiva:*\nSono permesse SOLO foto/video\ncon visualizzazione singola!\n\n‚ùå Foto/video "sempre visibili"\nverranno eliminati automaticamente.' : '‚úÖ *Regola disattivata:*\n√à possibile inviare qualsiasi\ntipo di media senza restrizioni.'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üëÆ Impostato da: ${msg._data.notifyName || 'Admin'}`;
    
    await msg.reply(response);
}

        

    try {
        
        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        // üïπÔ∏è GIOCHI VELOCI
        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        if (command === 'rps' || command === 'morra') {
            const choices = ['sasso', 'carta', 'forbice'];
            const userChoice = args[0]?.toLowerCase();
            
            if (!userChoice || !choices.includes(userChoice)) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Scegli: sasso, carta o forbice\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.rps sasso`\n' +
                    '‚Ä¢ `.morra carta`\n' +
                    '‚Ä¢ `.rps forbice`'
                );
            }
            
            const botChoice = choice(choices);
            let result = '';
            let emoji = '';
            
            if (userChoice === botChoice) {
                result = 'PAREGGIO!';
                emoji = 'ü§ù';
            } else if (
                (userChoice === 'sasso' && botChoice === 'forbice') ||
                (userChoice === 'carta' && botChoice === 'sasso') ||
                (userChoice === 'forbice' && botChoice === 'carta')
            ) {
                result = 'HAI VINTO!';
                emoji = 'üéâ';
            } else {
                result = 'HAI PERSO!';
                emoji = 'üò≠';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üéÆ *MORRA CINESE*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Tu:* ${userChoice}
ü§ñ *Bot:* ${botChoice}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${emoji} *${result}*`;
            
            await msg.reply(response);
        }

        // ========== SLOT ==========
        else if (command === 'slot') {
            const symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üíé', '7Ô∏è‚É£', 'üîî', '‚≠ê'];
            const slot1 = choice(symbols);
            const slot2 = choice(symbols);
            const slot3 = choice(symbols);
            
            let result = '';
            let prize = '';
            
            if (slot1 === slot2 && slot2 === slot3) {
                if (slot1 === '7Ô∏è‚É£') {
                    result = 'JACKPOT!!! üí∞üí∞üí∞';
                    prize = 'üé∞ Vincita: 10.000 punti!';
                } else if (slot1 === 'üíé') {
                    result = 'SUPER WIN! üíéüíéüíé';
                    prize = 'üí∞ Vincita: 5.000 punti!';
                } else {
                    result = 'HAI VINTO! üéâ';
                    prize = 'üíµ Vincita: 1.000 punti!';
                }
            } else if (slot1 === slot2 || slot2 === slot3 || slot1 === slot3) {
                result = 'Piccola vincita! ‚ú®';
                prize = 'üí∞ Vincita: 100 punti!';
            } else {
                result = 'Riprova! üò¢';
                prize = 'üí∏ Nessuna vincita';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üé∞ *SLOT MACHINE*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  ${slot1}  ‚îÇ  ${slot2}  ‚îÇ  ${slot3}  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${result}
${prize}`;
            
            await msg.reply(response);
        }

        // ========== INDOVINA ==========
        else if (command === 'indovina') {
            const userNum = parseInt(args[0]);
            const secretNum = random(1, 100);
            
            if (!userNum || userNum < 1 || userNum > 100) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Scegli un numero tra 1 e 100\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.indovina 50`\n' +
                    '‚Ä¢ `.indovina 27`'
                );
            }
            
            const diff = Math.abs(userNum - secretNum);
            let hint = '';
            let emoji = '';
            
            if (userNum === secretNum) {
                const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üéØ *INDOVINA NUMERO* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéâ *INCREDIBILE!*
Hai indovinato al primo colpo!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî¢ Numero segreto: *${secretNum}*
üë§ Tuo numero: *${userNum}*

üèÜ *VITTORIA PERFETTA!*`;
                
                return msg.reply(response);
            }
            
            if (diff <= 5) {
                hint = 'CALDISSIMO!';
                emoji = 'üî•üî•üî•';
            } else if (diff <= 10) {
                hint = 'Molto caldo!';
                emoji = '‚ô®Ô∏è‚ô®Ô∏è';
            } else if (diff <= 20) {
                hint = 'Caldo';
                emoji = 'üå°Ô∏è';
            } else if (diff <= 30) {
                hint = 'Tiepido';
                emoji = 'üòê';
            } else {
                hint = 'Freddo';
                emoji = '‚ùÑÔ∏è';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üéØ *INDOVINA NUMERO* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ùå *Sbagliato!*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî¢ Numero segreto: *${secretNum}*
üë§ Tuo numero: *${userNum}*
üìä Differenza: ${diff}

${emoji} *${hint}*`;
            
            await msg.reply(response);
        }

        // ========== 8BALL ==========
        else if (command === '8ball') {
            const responses = [
                { text: 'Certamente!', emoji: '‚úÖ', type: 'positive' },
                { text: 'Senza dubbio!', emoji: '‚úÖ', type: 'positive' },
                { text: 'Assolutamente s√¨!', emoji: '‚úÖ', type: 'positive' },
                { text: 'Puoi contarci!', emoji: '‚úÖ', type: 'positive' },
                { text: 'S√¨, decisamente!', emoji: '‚úÖ', type: 'positive' },
                { text: 'Forse...', emoji: 'ü§î', type: 'maybe' },
                { text: 'Non sono sicuro...', emoji: 'ü§î', type: 'maybe' },
                { text: 'Chiedimelo dopo', emoji: 'ü§î', type: 'maybe' },
                { text: 'Meglio non dirlo ora', emoji: 'ü§î', type: 'maybe' },
                { text: 'Concentrati e riprova', emoji: 'ü§î', type: 'maybe' },
                { text: 'No', emoji: '‚ùå', type: 'negative' },
                { text: 'Assolutamente no!', emoji: '‚ùå', type: 'negative' },
                { text: 'Non ci contare', emoji: '‚ùå', type: 'negative' },
                { text: 'Le mie fonti dicono no', emoji: '‚ùå', type: 'negative' },
                { text: 'Molto dubbio', emoji: '‚ùå', type: 'negative' }
            ];
            
            if (args.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Fai una domanda alla palla magica!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.8ball sar√≤ ricco?`\n' +
                    '‚Ä¢ `.8ball trover√≤ l\'amore?`\n' +
                    '‚Ä¢ `.8ball vinco la lotteria?`'
                );
            }
            
            const answer = choice(responses);
            const question = args.join(' ');
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üé± *PALLA MAGICA 8*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ùì *Domanda:*
${question}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${answer.emoji} *${answer.text}*`;
            
            await msg.reply(response);
        }

        // ========== SCELTA ==========
        else if (command === 'scelta') {
            const input = msg.body.slice(PREFIX.length + 7);
            const options = input.split('|').map(o => o.trim()).filter(o => o);
            
            if (options.length < 2) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Separa le opzioni con |\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.scelta pizza|pasta`\n' +
                    '‚Ä¢ `.scelta mare|montagna|citt√†`\n' +
                    '‚Ä¢ `.scelta s√¨|no|forse`'
                );
            }
            
            const selected = choice(options);
            const optionsList = options.map((opt, i) => `${i + 1}. ${opt}`).join('\n');
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üéØ *SCELTA CASUALE*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã *Opzioni:*
${optionsList}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® *Ho scelto:*
üé≤ *${selected}*`;
            
            await msg.reply(response);
        }

        // ========== DADO ==========
        else if (command === 'dado') {
            const result = random(1, 6);
            const diceEmoji = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'][result - 1];
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üé≤ *DADO*         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

        ${diceEmoji}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ *Risultato: ${result}*`;
            
            await msg.reply(response);
        }

        // ========== MONETA ==========
        else if (command === 'moneta') {
            const result = random(0, 1);
            const face = result === 0 ? 'Testa' : 'Croce';
            const emoji = result === 0 ? 'üë§' : '‚úñÔ∏è';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü™ô *LANCIA MONETA*   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

        ${emoji}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ *Risultato: ${face}*`;
            
            await msg.reply(response);
        }

        // ========== GRATTA E VINCI ==========
        else if (command === 'grattaevinci') {
            const symbols = ['üçí', 'üçã', '‚≠ê', 'üíé', '7Ô∏è‚É£', 'üîî'];
            const results = Array(9).fill(0).map(() => choice(symbols));
            
            const grid = `
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ${results[0]} ‚îÇ ${results[1]} ‚îÇ ${results[2]} ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ${results[3]} ‚îÇ ${results[4]} ‚îÇ ${results[5]} ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ${results[6]} ‚îÇ ${results[7]} ‚îÇ ${results[8]} ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îò`;
            
            // Trova simbolo vincente
            const symbolCounts = {};
            results.forEach(s => symbolCounts[s] = (symbolCounts[s] || 0) + 1);
            const winSymbol = Object.keys(symbolCounts).find(s => symbolCounts[s] >= 3);
            
            let prize = '';
            let result = '';
            
            if (winSymbol) {
                const count = symbolCounts[winSymbol];
                if (count >= 5) {
                    result = 'üé∞ SUPER JACKPOT!!!';
                    prize = 'üí∞ Vincita: 50.000 punti!';
                } else if (count === 4) {
                    result = 'üéâ GRANDE VINCITA!';
                    prize = 'üíµ Vincita: 10.000 punti!';
                } else {
                    result = '‚ú® HAI VINTO!';
                    prize = 'üí∞ Vincita: 1.000 punti!';
                }
            } else {
                result = 'üò¢ Non hai vinto';
                prize = 'üí∏ Ritenta!';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üé´ *GRATTA E VINCI*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${grid}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${result}
${prize}`;
            
            await msg.reply(response);
        }

        // ========== LOTTERIA ==========
        else if (command === 'lotteria') {
            const numbers = [];
            while(numbers.length < 6) {
                const n = random(1, 90);
                if (!numbers.includes(n)) numbers.push(n);
            }
            numbers.sort((a, b) => a - b);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üé∞ *LOTTERIA*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üî¢ *Numeri estratti:*

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ  ${numbers.map(n => n.toString().padStart(2, '0')).join('  ‚îÇ  ')}  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üçÄ *Buona fortuna!*
‚ú® In bocca al lupo!`;
            
            await msg.reply(response);
        }

        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        // üÉè CASINO & CARTE
        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        // ========== BLACKJACK ==========
        else if (command === 'blackjack') {
            const cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
            const suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è'];
            
            const getCard = () => `${choice(cards)}${choice(suits)}`;
            const getValue = (card) => {
                const val = card.slice(0, -2);
                if (val === 'A') return 11;
                if (['J', 'Q', 'K'].includes(val)) return 10;
                return parseInt(val);
            };
            
            const playerCards = [getCard(), getCard()];
            const dealerCards = [getCard(), getCard()];
            
            let playerValue = playerCards.reduce((sum, c) => sum + getValue(c), 0);
            let dealerValue = dealerCards.reduce((sum, c) => sum + getValue(c), 0);
            
            // Gestione Assi
            if (playerValue > 21 && playerCards.some(c => c.startsWith('A'))) playerValue -= 10;
            if (dealerValue > 21 && dealerCards.some(c => c.startsWith('A'))) dealerValue -= 10;
            
            let result = '';
            let emoji = '';
            
            if (playerValue > 21) {
                result = 'HAI SBALLATO!';
                emoji = 'üí•';
            } else if (dealerValue > 21) {
                result = 'DEALER SBALLATO! HAI VINTO!';
                emoji = 'üéâ';
            } else if (playerValue === 21 && playerCards.length === 2) {
                result = 'BLACKJACK! HAI VINTO!';
                emoji = 'üé∞';
            } else if (dealerValue === 21 && dealerCards.length === 2) {
                result = 'Dealer fa Blackjack!';
                emoji = 'üò¢';
            } else if (playerValue > dealerValue) {
                result = 'HAI VINTO!';
                emoji = 'üéâ';
            } else if (playerValue < dealerValue) {
                result = 'Hai perso';
                emoji = 'üò¢';
            } else {
                result = 'PAREGGIO!';
                emoji = 'ü§ù';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üÉè *BLACKJACK*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *Le tue carte:*
${playerCards.join(' ')}
üéØ Punteggio: *${playerValue}*

üé© *Dealer:*
${dealerCards.join(' ')}
üéØ Punteggio: *${dealerValue}*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${emoji} *${result}*`;
            
            await msg.reply(response);
        }

        // ========== ROULETTE ==========
        else if (command === 'roulette') {
            const bet = args[0]?.toLowerCase();
            const number = random(0, 36);
            const isRed = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36].includes(number);
            const color = number === 0 ? 'verde' : (isRed ? 'rosso' : 'nero');
            const colorEmoji = number === 0 ? 'üíö' : (isRed ? 'üî¥' : '‚ö´');
            
            if (!bet) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Scommetti su:\n' +
                    '‚Ä¢ `rosso` o `nero`\n' +
                    '‚Ä¢ numero (0-36)\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.roulette rosso`\n' +
                    '‚Ä¢ `.roulette 17`\n' +
                    '‚Ä¢ `.roulette nero`'
                );
            }
            
            let result = '';
            let prize = '';
            let won = false;
            
            if (bet === 'rosso' && color === 'rosso') {
                result = 'HAI VINTO!';
                prize = 'üí∞ Vincita: x2';
                won = true;
            } else if (bet === 'nero' && color === 'nero') {
                result = 'HAI VINTO!';
                prize = 'üí∞ Vincita: x2';
                won = true;
            } else if (bet === 'verde' && color === 'verde') {
                result = 'VERDE! JACKPOT!';
                prize = 'üíö Vincita: x36';
                won = true;
            } else if (bet === number.toString()) {
                result = 'NUMERO ESATTO! JACKPOT!';
                prize = 'üé∞ Vincita: x36';
                won = true;
            } else {
                result = 'Hai perso';
                prize = 'üí∏ Riprova!';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üé° *ROULETTE*       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üîÆ *Numero uscito:*
    ${colorEmoji} *${number}* (${color})

üí∞ *Scommessa:* ${bet}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${won ? 'üéâ' : 'üò¢'} *${result}*
${prize}`;
            
            await msg.reply(response);
        }

        // ========== POKER ==========
        else if (command === 'poker') {
            const suits = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è'];
            const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
            const hand = [];
            
            for (let i = 0; i < 5; i++) {
                hand.push(`${choice(values)}${choice(suits)}`);
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üÉè *POKER HAND*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üé¥ *La tua mano:*

‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ ${hand.join('  ')} ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üé∞ Buona fortuna!`;
            
            await msg.reply(response);
        }

        // ========== BINGO ==========
        else if (command === 'bingo') {
            const numbers = [];
            while(numbers.length < 15) {
                const n = random(1, 75);
                if (!numbers.includes(n)) numbers.push(n);
            }
            numbers.sort((a, b) => a - b);
            
            const card = `
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ B  ‚îÇ I  ‚îÇ N  ‚îÇ G  ‚îÇ O  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ${numbers[0].toString().padStart(2)} ‚îÇ ${numbers[3].toString().padStart(2)} ‚îÇ ${numbers[6].toString().padStart(2)} ‚îÇ ${numbers[9].toString().padStart(2)} ‚îÇ ${numbers[12].toString().padStart(2)} ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ${numbers[1].toString().padStart(2)} ‚îÇ ${numbers[4].toString().padStart(2)} ‚îÇ ‚≠ê ‚îÇ ${numbers[10].toString().padStart(2)} ‚îÇ ${numbers[13].toString().padStart(2)} ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ${numbers[2].toString().padStart(2)} ‚îÇ ${numbers[5].toString().padStart(2)} ‚îÇ ${numbers[7].toString().padStart(2)} ‚îÇ ${numbers[11].toString().padStart(2)} ‚îÇ ${numbers[14].toString().padStart(2)} ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îò`;
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üé∞ *BINGO CARD*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${card}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® Buona fortuna!
üéØ BINGO!`;
            
            await msg.reply(response);
        }

        // ========== SCOMMESSA ==========
        else if (command === 'scommessa') {
            const amount = parseInt(args[0]) || 100;
            const win = random(0, 1) === 1;
            const multiplier = (random(15, 30) / 10).toFixed(1);
            const winAmount = Math.floor(amount * multiplier);
            
            let response = '';
            
            if (win) {
                response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üí∞ *SCOMMESSA*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚úÖ *HAI VINTO!*

üíµ Puntata: *${amount}* punti
üìà Moltiplicatore: *x${multiplier}*
üéâ Vincita: *${winAmount}* punti

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ Profitto: *+${winAmount - amount}* punti`;
            } else {
                response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üí∏ *SCOMMESSA*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ùå *Hai perso!*

üíµ Puntata: *${amount}* punti
üìâ Persi: *${amount}* punti

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üò¢ Riprova! La fortuna girer√†!`;
            }
            
            await msg.reply(response);
        }

        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        // üß† GIOCHI DI INTELLETTO
        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        // ========== QUIZ ==========
        else if (command === 'quiz') {
            const quizzes = [
                { q: 'Qual √® la capitale della Francia?', a: ['Parigi', 'Londra', 'Berlino', 'Madrid'], c: 0 },
                { q: 'Quanti continenti ci sono?', a: ['5', '6', '7', '8'], c: 2 },
                { q: 'Chi ha dipinto la Gioconda?', a: ['Michelangelo', 'Leonardo da Vinci', 'Raffaello', 'Donatello'], c: 1 },
                { q: 'Quale pianeta √® il pi√π vicino al Sole?', a: ['Venere', 'Marte', 'Mercurio', 'Terra'], c: 2 },
                { q: 'In che anno √® finita la Seconda Guerra Mondiale?', a: ['1943', '1944', '1945', '1946'], c: 2 },
                { q: 'Qual √® l\'oceano pi√π grande?', a: ['Atlantico', 'Pacifico', 'Indiano', 'Artico'], c: 1 },
                { q: 'Quante corde ha una chitarra classica?', a: ['4', '5', '6', '7'], c: 2 },
                { q: 'Chi ha scritto "La Divina Commedia"?', a: ['Petrarca', 'Dante', 'Boccaccio', 'Manzoni'], c: 1 }
            ];
            
            const quiz = choice(quizzes);
            const options = quiz.a.map((opt, i) => `${i + 1}. ${opt}`).join('\n');
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üß† *QUIZ*         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ùì *Domanda:*
${quiz.q}

üìã *Opzioni:*
${options}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ *Risposta:* ||${quiz.a[quiz.c]}||`;
            
            await msg.reply(response);
        }

        // ========== TRIVIA ==========
        else if (command === 'trivia') {
            const facts = [
                { fact: 'Il miele non scade mai!', emoji: 'üçØ' },
                { fact: 'Un polpo ha 3 cuori!', emoji: 'üêô' },
                { fact: 'La Torre Eiffel pu√≤ crescere di 15cm in estate!', emoji: 'üóº' },
                { fact: 'Le banane sono bacche, le fragole no!', emoji: 'üçå' },
                { fact: 'Il cuore di un gambero √® nella testa!', emoji: 'ü¶ê' },
                { fact: 'I pinguini hanno le ginocchia!', emoji: 'üêß' },
                { fact: 'La luce del sole impiega 8 minuti per arrivare sulla Terra!', emoji: '‚òÄÔ∏è' },
                { fact: 'Gli squali sono pi√π vecchi degli alberi!', emoji: 'ü¶à' },
                { fact: 'Le impronte digitali dei koala sono quasi identiche a quelle umane!', emoji: 'üê®' },
                { fact: 'Un fulmine √® pi√π caldo della superficie del sole!', emoji: '‚ö°' }
            ];
            
            const trivia = choice(facts);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    üí° *TRIVIA*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${trivia.emoji} *Lo sapevi?*

${trivia.fact}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§ì Cultura generale!`;
            
            await msg.reply(response);
        }

        // ========== MATH ==========
        else if (command === 'math') {
            const num1 = random(1, 20);
            const num2 = random(1, 20);
            const operations = [
                { op: '+', symbol: '+', calc: (a, b) => a + b },
                { op: '-', symbol: '-', calc: (a, b) => a - b },
                { op: '*', symbol: '√ó', calc: (a, b) => a * b }
            ];
            const operation = choice(operations);
            const result = operation.calc(num1, num2);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üî¢ *MATEMATICA*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ùì *Calcola:*

     ${num1} ${operation.symbol} ${num2} = ?

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ *Risposta:* ||${result}||`;
            
            await msg.reply(response);
        }

        // ========== ENIGMA ==========
        else if (command === 'enigma') {
            const riddles = [
                { q: 'Ho le chiavi ma nessuna serratura. Ho spazio ma nessuna stanza. Puoi entrare ma non uscire. Cosa sono?', a: 'Una tastiera' },
                { q: 'Pi√π ne togli, pi√π divento grande. Cosa sono?', a: 'Un buco' },
                { q: 'Cosa ha un collo ma non ha testa?', a: 'Una bottiglia' },
                { q: 'Vado su e gi√π ma non mi muovo mai. Cosa sono?', a: 'Le scale' },
                { q: 'Ho citt√† ma nessuna casa, foreste ma nessun albero, acqua ma nessun pesce. Cosa sono?', a: 'Una mappa' },
                { q: 'Sono sempre affamato, devo sempre essere nutrito. Il dito che tocco, presto diventer√† rosso. Cosa sono?', a: 'Il fuoco' },
                { q: 'Puoi vedermi di notte nella luminosit√†. Sono una luce che non hai mai acceso. Cosa sono?', a: 'La luna' }
            ];
            
            const riddle = choice(riddles);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    ü§î *ENIGMA*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üé≠ *Indovina:*

${riddle.q}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí° *Risposta:* ||${riddle.a}||`;
            
            await msg.reply(response);
        }

        // ========== PAROLA ==========
        else if (command === 'parola') {
            const words = ['AMORE', 'CUORE', 'STELLA', 'FIORE', 'MARE', 'SOLE', 'LUNA', 'VENTO', 'FUOCO', 'TERRA'];
            const word = choice(words);
            const scrambled = word.split('').sort(() => Math.random() - 0.5).join('');
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üî§ *ANAGRAMMA*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üîÄ *Parola mescolata:*

     *${scrambled}*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ *Soluzione:* ||${word}||`;
            
            await msg.reply(response);
        }

        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        // üíò AMORE & ROMANTICO
        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        // ========== SHIP ==========
        else if (command === 'ship') {
            const mentions = await msg.getMentions();
            
            if (mentions.length < 2) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona 2 persone per vedere la loro compatibilit√†!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.ship @persona1 @persona2`'
                );
            }
            
            const user1 = mentions[0].pushname || mentions[0].verifiedName || 'User1';
            const user2 = mentions[1].pushname || mentions[1].verifiedName || 'User2';
            const percent = percentage();
            
            let emoji = '';
            let message = '';
            
            if (percent >= 90) {
                emoji = 'üíïüíïüíï';
                message = 'Anime gemelle! Matrimonio in vista! üíí';
            } else if (percent >= 70) {
                emoji = '‚ù§Ô∏è‚ù§Ô∏è';
                message = 'Ottima compatibilit√†! Coppia perfetta! ü•∞';
            } else if (percent >= 50) {
                emoji = 'üíñ';
                message = 'Buona chimica! Potrebbe funzionare! üòä';
            } else if (percent >= 30) {
                emoji = 'üíî';
                message = 'Compatibilit√† bassa... Forse solo amici? ü§∑';
            } else {
                emoji = 'üíÄ';
                message = 'Disastro totale! Meglio evitare! üò±';
            }
            
            const hearts = '‚ù§Ô∏è'.repeat(Math.floor(percent / 10));
            const empty = 'ü§ç'.repeat(10 - Math.floor(percent / 10));
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üíò *SHIP METER*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ ${user1}
     üíï
üë§ ${user2}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${emoji} *${percent}%* ${emoji}

[${hearts}${empty}]

${message}`;
            
            await msg.reply(response);
        }

        // ========== CREA COPPIA ==========
        else if (command === 'creacoppia') {
            if (!isGroup) {
                return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
            }
            
            const participants = chat.participants.map(p => p.id._serialized);
            
            if (participants.length < 2) {
                return msg.reply('‚ùå Servono almeno 2 persone nel gruppo!');
            }
            
            const person1 = choice(participants);
            let person2 = choice(participants);
            while (person2 === person1 && participants.length > 1) {
                person2 = choice(participants);
            }
            
            const contact1 = await client.getContactById(person1);
            const contact2 = await client.getContactById(person2);
            const name1 = contact1.pushname || contact1.verifiedName || 'User1';
            const name2 = contact2.pushname || contact2.verifiedName || 'User2';
            
            const percent = percentage();
            
            let verdict = '';
            if (percent >= 70) verdict = 'üéâ Coppia perfetta!';
            else if (percent >= 40) verdict = 'üòä Potrebbe funzionare!';
            else verdict = 'üòÖ Mmm... difficile!';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíë *COPPIA RANDOM*   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üíò *Cupido ha scelto:*

üë§ @${person1.split('@')[0]}
     üíï
üë§ @${person2.split('@')[0]}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíò Compatibilit√†: *${percent}%*

${verdict}`;
            
            await chat.sendMessage(response, {
                mentions: [contact1, contact2]
            });
        }

        // ========== AMORE ==========
        else if (command === 'amore') {
            const quotes = [
                { text: 'L\'amore √® come il vento, non puoi vederlo ma puoi sentirlo.', emoji: 'üíï' },
                { text: 'Sei la ragione per cui sorrido ogni giorno.', emoji: '‚ù§Ô∏è' },
                { text: 'In un mare di persone, i miei occhi cercheranno sempre te.', emoji: 'üíñ' },
                { text: 'Ti amo non solo per quello che sei, ma per quello che sono io quando sono con te.', emoji: 'üåπ' },
                { text: 'Ogni momento con te √® un momento che vorrei durasse per sempre.', emoji: 'üíù' },
                { text: 'Il mio cuore batte il tuo nome.', emoji: 'üíó' },
                { text: 'Sei il mio per sempre e sempre.', emoji: 'üíì' },
                { text: 'Con te, ogni giorno √® San Valentino.', emoji: 'üíû' }
            ];
            
            const quote = choice(quotes);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíï *CITAZIONE AMORE* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${quote.emoji} "${quote.text}"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíò Con amore...`;
            
            await msg.reply(response);
        }

        // ========== BACIO ==========
        else if (command === 'bacia') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.bacia @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const kisses = [
                { text: `${sender} manda un bacio appassionato a ${target}!`, emoji: 'üíãüòò' },
                { text: `${sender} bacia dolcemente ${target} sulla guancia!`, emoji: 'üòòüíï' },
                { text: `${sender} e ${target} si baciano sotto le stelle!`, emoji: 'üíè‚ú®' },
                { text: `${sender} ruba un bacio a ${target}!`, emoji: 'üòöüíñ' },
                { text: `Un bacio magico da ${sender} per ${target}!`, emoji: 'üíãüåπ' }
            ];
            
            const kiss = choice(kisses);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë    üíã *BACIO*         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${kiss.emoji}

${kiss.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíï *Awww...*`;
            
            await msg.reply(response);
        }

        // ========== ABBRACCIO ==========
        else if (command === 'abbraccio') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.abbraccio @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const hugs = [
                { text: `${sender} abbraccia forte ${target}!`, emoji: 'ü§óüíï' },
                { text: `${sender} stringe ${target} in un abbraccio caloroso!`, emoji: 'ü´Ç‚ù§Ô∏è' },
                { text: `${sender} abbraccia teneramente ${target}!`, emoji: 'üíëü•∞' },
                { text: `Un super abbraccio da ${sender} per ${target}!`, emoji: 'ü§óüíñ' },
                { text: `${sender} e ${target} non vogliono pi√π lasciarsi!`, emoji: 'ü´Çüíû' }
            ];
            
            const hug = choice(hugs);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   ü§ó *ABBRACCIO*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${hug.emoji}

${hug.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíù *Che dolcezza!*`;
            
            await msg.reply(response);
        }

        // ========== APPUNTAMENTO ==========
        else if (command === 'appuntamento') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.appuntamento @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const dates = [
                { text: `${sender} chiede a ${target} di uscire!`, detail: '"Ti va di cenare con me stasera?"', emoji: 'üíëüç∑üåπ' },
                { text: `${sender} invita ${target} al cinema!`, detail: '"Ho due biglietti... uno √® per te!"', emoji: 'üé¨üçøüíï' },
                { text: `${sender} vuole guardare il tramonto con ${target}!`, detail: '"Il panorama sar√† pi√π bello con te accanto."', emoji: 'üåÖüåÑüíñ' },
                { text: `${sender} chiede a ${target} un caff√®!`, detail: '"Un caff√® insieme? Offro io! üòä"', emoji: '‚òïüíù' },
                { text: `${sender} propone una passeggiata romantica a ${target}!`, detail: '"Passeggiamo sotto le stelle?"', emoji: 'üö∂üåô‚ú®' }
            ];
            
            const date = choice(dates);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíë *APPUNTAMENTO*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${date.emoji}

${date.text}

${date.detail}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíò *Romantico!*`;
            
            await msg.reply(response);
        }

        // ========== COMPLIMENTO ==========
        else if (command === 'complimento') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.complimento @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            
            const compliments = [
                { text: `${target}, hai un sorriso che illumina la giornata!`, emoji: 'üíï‚ú®' },
                { text: `${target}, sei incredibilmente speciale!`, emoji: 'üåπüíñ' },
                { text: `${target}, la tua presenza rende tutto migliore!`, emoji: 'üí´‚ù§Ô∏è' },
                { text: `${target}, hai un fascino irresistibile!`, emoji: '‚ú®üòç' },
                { text: `${target}, sei bellissimo/a dentro e fuori!`, emoji: 'üíùü•∞' },
                { text: `${target}, sei unico/a e meraviglioso/a!`, emoji: 'üåüüíû' },
                { text: `${target}, il mondo √® pi√π bello con te!`, emoji: 'üíóüåà' }
            ];
            
            const compliment = choice(compliments);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíñ *COMPLIMENTO*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${compliment.emoji}

${compliment.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü•∞ *Che dolcezza!*`;
            
            await msg.reply(response);
        }

        // ========== LOVE TEST ==========
        else if (command === 'lovetest') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.lovetest @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Tu';
            
            const love = percentage();
            const passion = percentage();
            const chemistry = percentage();
            const future = percentage();
            
            const avg = Math.floor((love + passion + chemistry + future) / 4);
            
            let verdict = '';
            if (avg >= 80) verdict = 'üíï ANIME GEMELLE! Siete fatti l\'uno per l\'altra! üíï';
            else if (avg >= 60) verdict = '‚ù§Ô∏è Grande amore! Avete un futuro insieme! ‚ù§Ô∏è';
            else if (avg >= 40) verdict = 'üíñ Buona intesa! Continuate cos√¨! üíñ';
            else verdict = 'üíî Serve pi√π impegno... o forse solo amici? üíî';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üíò *LOVE TEST*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ ${sender}
     üíï
üë§ ${target}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíñ Amore: ${love}%
üî• Passione: ${passion}%
‚ö° Chimica: ${chemistry}%
üîÆ Futuro: ${future}%
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä Media: *${avg}%*

${verdict}`;
            
            await msg.reply(response);
        }

        // ========== CUORE ==========
        else if (command === 'cuore') {
            const heart = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üíñ *CUORE*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    ‚ô•Ô∏è‚ô•Ô∏è         ‚ô•Ô∏è‚ô•Ô∏è
  ‚ô•Ô∏è    ‚ô•Ô∏è     ‚ô•Ô∏è    ‚ô•Ô∏è
‚ô•Ô∏è        ‚ô•Ô∏è ‚ô•Ô∏è        ‚ô•Ô∏è
‚ô•Ô∏è                      ‚ô•Ô∏è
  ‚ô•Ô∏è                  ‚ô•Ô∏è
    ‚ô•Ô∏è              ‚ô•Ô∏è
      ‚ô•Ô∏è          ‚ô•Ô∏è
        ‚ô•Ô∏è      ‚ô•Ô∏è
          ‚ô•Ô∏è  ‚ô•Ô∏è
            ‚ô•Ô∏è

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíï Con tutto il cuore!`;
            
            await msg.reply(heart);
        }

        // ========== ROSA ROSSA ==========
        else if (command === 'rosarossa') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.rosarossa @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const rose = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üåπ *ROSA ROSSA*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

         üåπ
        /|\\
       / | \\
      /  |  \\
         |
         |
         |

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíê ${sender} regala una rosa a ${target}

üíï "Per te, con amore..."`;
            
            await msg.reply(rose);
        }

        // ========== POESIA ==========
        else if (command === 'poesia') {
            const poems = [
                `Nel profondo del mio cuore,\nRisiede un eterno ardore,\nChe brucia solo per te,\nAmore mio, eternamente.`,
                `Sei la stella che brilla,\nNella mia notte tranquilla,\nLa luce che mi guida,\nVerso una vita infinita.`,
                `Come fiore al mattino,\nChe si apre al suo destino,\nCos√¨ il mio cuore si schiude,\nQuando penso a te che concludi.`,
                `Tu sei il sogno che non finisce,\nL'amore che sempre fiorisce,\nLa ragione del mio esistere,\nIl mio dolce resistere.`
            ];
            
            const poem = choice(poems);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üìú *POESIA D'AMORE* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üíï ${poem}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåπ Con sentimento...`;
            
            await msg.reply(response);
        }

        // ========== DEDICA ==========
        else if (command === 'dedica') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0 || args.length < 2) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno e scrivi una dedica!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.dedica @persona Sei speciale`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            const dedication = args.slice(1).join(' ');
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíå *DEDICA SPECIALE* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üíï *Da:* ${sender}
üíñ *Per:* ${target}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"${dedication}"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåπ Con affetto...`;
            
            await msg.reply(response);
        }

        // ========== MATRIMONIO ==========
        else if (command === 'matrimonio') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.matrimonio @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            const acceptance = percentage();
            
            let answer = '';
            if (acceptance >= 70) answer = `${target} ha detto S√å! üíç‚ú®`;
            else if (acceptance >= 40) answer = `${target} ci deve pensare... ü§î`;
            else answer = `${target} ha rifiutato... üíîüò¢`;
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíç *PROPOSTA*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üíë ${sender} si inginocchia...

"${target}, vuoi sposarmi?"

          üíç
         /|\\
        / | \\

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${answer}

${acceptance >= 70 ? 'üéä Evviva gli sposi! üéä' : acceptance >= 40 ? '‚è≥ Dai tempo al tempo...' : 'üíî Forse un giorno...'}`;
            
            await msg.reply(response);
        }

        // ========== LETTERA ==========
        else if (command === 'lettera') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.lettera @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'Amore mio';
            const sender = msg._data.notifyName || 'Chi ti ama';
            
            const letters = [
                `Carissimo/a ${target},\n\nOgni giorno che passa mi rendo conto sempre di pi√π di quanto tu sia importante per me. Il tuo sorriso illumina le mie giornate e il tuo amore mi rende la persona pi√π fortunata del mondo.\n\nCon tutto il mio cuore,\n${sender} üíï`,
                `Mio/a dolce ${target},\n\nCi sono momenti in cui le parole non bastano per esprimere ci√≤ che sento. Tu sei la mia ispirazione, il mio sogno realizzato, la ragione per cui ogni giorno vale la pena di essere vissuto.\n\nPer sempre tuo/a,\n${sender} ‚ù§Ô∏è`,
                `A ${target}, con amore,\n\nSei entrato/a nella mia vita come un raggio di sole in una giornata grigia. Da quel momento, tutto ha acquisito un nuovo significato. Grazie per esistere.\n\nSempre,\n${sender} üíñ`
            ];
            
            const letter = choice(letters);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíå *LETTERA D'AMORE* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${letter}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåπ Sigillato con un bacio üíã`;
            
            await msg.reply(response);
        }

        // ========== SERENATA ==========
        else if (command === 'serenata') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.serenata @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üéµ *SERENATA*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåô Sotto la tua finestra...

${sender} canta per ${target}:

‚ô™ ‚ô´ ‚ô™ ‚ô´

"üé∂ Sei tu la mia stella,
che brilla la sera,
l'amore pi√π vero,
che il cuore spera! üé∂"

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üé∏ Con passione... üíï`;
            
            await msg.reply(response);
        }

        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        // üî• PICCANTE & SPICY
        // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        // ========== OBBLIGO ==========
        else if (command === 'obbligo') {
            const dares = [
                { text: 'Manda un vocale sexy di 10 secondi', emoji: 'üî•' },
                { text: 'Descrivi il tuo sogno pi√π proibito', emoji: 'üòà' },
                { text: 'Racconta la tua esperienza pi√π audace', emoji: 'üíã' },
                { text: 'Manda un selfie con uno sguardo provocante', emoji: 'üòè' },
                { text: 'Sussurra qualcosa di piccante', emoji: 'üå∂Ô∏è' }
            ];
            
            const dare = choice(dares);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üî• *OBBLIGO OS√â*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${dare.emoji}

*${dare.text}*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üòà Osi o non osi?`;
            
            await msg.reply(response);
        }

        // ========== VERIT√Ä ==========
        else if (command === 'verita') {
            const truths = [
                { text: 'Qual √® la tua fantasia segreta?', emoji: 'üòè' },
                { text: 'Hai mai fatto qualcosa di molto audace?', emoji: 'üî•' },
                { text: 'Qual √® il posto pi√π strano dove hai baciato qualcuno?', emoji: 'üíã' },
                { text: 'Qual √® il tuo pi√π grande desiderio nascosto?', emoji: 'üå∂Ô∏è' },
                { text: 'Hai mai avuto un sogno piccante? Raccontalo!', emoji: 'üòà' }
            ];
            
            const truth = choice(truths);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üí¨ *VERIT√Ä PICCANTE* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${truth.emoji}

*${truth.text}*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ü§ê Confessa!`;
            
            await msg.reply(response);
        }

        // ========== OSARE ==========
        else if (command === 'osare') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.osare @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const challenges = [
                { text: `${sender} sfida ${target} a mandare un vocale sexy!`, emoji: 'üî•üòè' },
                { text: `${sender} osa ${target} a confessare la sua fantasia!`, emoji: 'üòàüí≠' },
                { text: `${sender} sfida ${target} a descrivere il suo tipo ideale!`, emoji: 'üíã‚ù§Ô∏è' },
                { text: `${sender} osa ${target} a rivelare il suo sogno proibito!`, emoji: 'üå∂Ô∏èüòè' },
                { text: `${sender} sfida ${target} a fare un complimento audace!`, emoji: 'üî•üíï' }
            ];
            
            const challenge = choice(challenges);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üòà *SFIDA PICCANTE*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${challenge.emoji}

${challenge.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ Accetti la sfida?`;
            
            await msg.reply(response);
        }

        // ========== SPIN ==========
        else if (command === 'spin') {
            if (!isGroup) {
                return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
            }
            
            const participants = chat.participants.map(p => p.id._serialized);
            
            if (participants.length < 2) {
                return msg.reply('‚ùå Servono almeno 2 persone!');
            }
            
            const selected = choice(participants);
            const contact = await client.getContactById(selected);
            const name = contact.pushname || contact.verifiedName || 'Qualcuno';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üçæ *GIRA BOTTIGLIA*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

       üçæ
      /  \\
     /    \\
    /      \\
   /        \\
  ----------
      ‚¨áÔ∏è

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ La bottiglia indica:

üë§ *${name}*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üòè Cosa succeder√†?`;
            
            await msg.reply(response);
        }

        // ========== FLIRT ==========
        else if (command === 'flirt') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.flirt @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            
            const flirts = [
                { text: `Hey ${target}, sei cos√¨ affascinante che il mio cuore ha saltato un battito... üòè`, emoji: 'üòèüíï' },
                { text: `${target}, devo chiamare i vigili? Perch√© sei troppo hot! üî•`, emoji: 'üî•üòà' },
                { text: `${target}, ho perso il mio numero... posso avere il tuo? üòò`, emoji: 'üòòüì±' },
                { text: `${target}, sei un ladro/a? Perch√© mi hai rubato il cuore! üíã`, emoji: 'üíãüíñ' },
                { text: `${target}, credi nel colpo di fulmine o devo passare di nuovo? ‚ö°`, emoji: '‚ö°üòç' }
            ];
            
            const flirt = choice(flirts);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üòè *FLIRT PICCANTE*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${flirt.emoji}

${flirt.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Che audacia!`;
            
            await msg.reply(response);
        }

        // ========== HOT RATE ==========
        else if (command === 'hotrate') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.hotrate @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const rating = random(1, 10);
            
            let emoji = '';
            let verdict = '';
            
            if (rating >= 9) {
                emoji = 'üî•üî•üî•';
                verdict = 'INFUOCATO! Impossibile resistere!';
            } else if (rating >= 7) {
                emoji = 'üî•üî•';
                verdict = 'Molto hot! Temperatura alta!';
            } else if (rating >= 5) {
                emoji = 'üî•';
                verdict = 'Decisamente interessante!';
            } else {
                emoji = 'üòÖ';
                verdict = 'Serve pi√π fuoco!';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üî• *HOT RATE*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ *${target}*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${emoji} *${rating}/10* ${emoji}

${verdict}`;
            
            await msg.reply(response);
        }

        // ========== SEDUZIONE ==========
        else if (command === 'seduzione') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.seduzione @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            
            const techniques = [
                { text: `Guardalo/a negli occhi intensamente e sorridi misteriosamente`, emoji: 'üëÅÔ∏èüí´' },
                { text: `Sussurra qualcosa al suo orecchio`, emoji: 'üëÇüî•' },
                { text: `Gioca con i capelli mentre parli con lui/lei`, emoji: 'üíÅ‚Äç‚ôÄÔ∏è‚ú®' },
                { text: `Toccalo/a "accidentalmente" sul braccio`, emoji: 'ü§öüíï' },
                { text: `Mordicchia leggermente il labbro inferiore`, emoji: 'üíãüòè' }
            ];
            
            const technique = choice(techniques);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üòà *SEDUZIONE*       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üéØ *Obiettivo:* ${target}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${technique.emoji}

*Tecnica:*
${technique.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Irresistibile!`;
            
            await msg.reply(response);
        }

        // ========== WINK ==========
        else if (command === 'wink') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.wink @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üòâ *OCCHIOLINO*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${sender} fa un occhiolino
civettoso a ${target}! üòâ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíï Che birichino/a!`;
            
            await msg.reply(response);
        }

        // ========== SUSSURRO ==========
        else if (command === 'sussurro') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0 || args.length < 2) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno e scrivi!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.sussurro @persona Sei bellissimo/a`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            const whisper = args.slice(1).join(' ');
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ü§´ *SUSSURRO*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${sender} sussurra all'orecchio di ${target}:

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üëÇ *"${whisper}"*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üòè Intimo e misterioso...`;
            
            await msg.reply(response);
        }

        // ========== PICCANTE ==========
        else if (command === 'piccante') {
            const facts = [
                { text: 'Il cioccolato aumenta il desiderio', emoji: 'üç´üî•' },
                { text: 'Un bacio brucia 6 calorie', emoji: 'üíãüî•' },
                { text: 'Gli occhi si dilatano quando vedi qualcuno che ti piace', emoji: 'üëÅÔ∏èüíï' },
                { text: 'Il cuore batte pi√π forte quando flirtiamo', emoji: 'üíìüòè' },
                { text: 'Le labbra sono 100 volte pi√π sensibili delle dita', emoji: 'üíã‚ú®' }
            ];
            
            const fact = choice(facts);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üå∂Ô∏è *FATTO PICCANTE* ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${fact.emoji}

${fact.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Interessante...`;
            
            await msg.reply(response);
        }

        // ========== DESIDERIO ==========
        else if (command === 'desiderio') {
            const desires = [
                { text: 'Un bacio appassionato sotto la pioggia', emoji: 'üíãüåßÔ∏è' },
                { text: 'Una cena a lume di candela seguita da...', emoji: 'üïØÔ∏èüòè' },
                { text: 'Una notte da ricordare sotto le stelle', emoji: '‚≠êüåô' },
                { text: 'Un weekend romantico in un luogo isolato', emoji: 'üèùÔ∏è‚ù§Ô∏è' },
                { text: 'Una danza sensuale a mezzanotte', emoji: 'üíÉüïõ' }
            ];
            
            const desire = choice(desires);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üí≠ *DESIDERIO*       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${desire.emoji}

${desire.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Un sogno...`;
            
            await msg.reply(response);
        }

        // ========== FANTASIA ==========
        else if (command === 'fantasia') {
            const fantasies = [
                { text: 'Una fuga romantica a Parigi', emoji: 'üóº‚ù§Ô∏è' },
                { text: 'Una serata privata in una spa', emoji: 'üõÄüíï' },
                { text: 'Un picnic al tramonto sulla spiaggia', emoji: 'üåÖüç∑' },
                { text: 'Una notte in una suite lussuosa', emoji: 'üè®‚ú®' },
                { text: 'Un ballo lento al chiaro di luna', emoji: 'üåôüíÉ' }
            ];
            
            const fantasy = choice(fantasies);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚ú® *FANTASIA*        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${fantasy.emoji}

*Scenario:*
${fantasy.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üòè Immaginazione al potere!`;
            
            await msg.reply(response);
        }

        // ========== 7 MINUTI ==========
        else if (command === 'gioco7minuti') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.gioco7minuti @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚è±Ô∏è *7 MINUTI PARADISO*‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üö™ *Nel ripostiglio:*

üë§ ${sender}
     üíï
üë§ ${target}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è±Ô∏è Timer: 7:00

3... 2... 1... VIA! üî•

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üòè Cosa succeder√†?`;
            
            await msg.reply(response);
        }

        // ========== SPOGLIARELLO ==========
        else if (command === 'spogliarello') {
            const points = random(0, 100);
            
            let rating = '';
            if (points >= 90) rating = 'üî•üî•üî• INFUOCANTE!';
            else if (points >= 70) rating = 'üî•üî• Molto hot!';
            else if (points >= 50) rating = 'üî• Buono!';
            else rating = 'üòÖ Serve pratica!';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üíÉ *SPOGLIARELLO*    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üé≠ *Performance:*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä Punteggio: *${points}/100*

${rating}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üòè Che spettacolo!`;
            
            await msg.reply(response);
        }

        // ========== DIRTY ==========
        else if (command === 'dirty') {
            const questions = [
                { text: 'Qual √® il tuo pi√π grande segreto intimo?', emoji: 'üî•' },
                { text: 'Hai mai fatto qualcosa di molto audace?', emoji: 'üòà' },
                { text: 'Qual √® la cosa pi√π piccante che hai fatto?', emoji: 'üå∂Ô∏è' },
                { text: 'Cosa ti eccita di pi√π?', emoji: 'üíã' },
                { text: 'Qual √® la tua fantasia pi√π nascosta?', emoji: 'üòè' }
            ];
            
            const question = choice(questions);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üòà *DIRTY QUESTION*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${question.emoji}

*${question.text}*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Rispondi se osi!`;
            
            await msg.reply(response);
        }

        // ========== NAUGHTY ==========
        else if (command === 'naughty') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.naughty @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Qualcuno';
            
            const messages = [
                { text: `${sender} guarda ${target} con uno sguardo malizioso... üòè`, emoji: 'üòà' },
                { text: `${sender} manda un messaggio birichino a ${target}... üî•`, emoji: 'üíã' },
                { text: `${sender} fa una proposta indecente a ${target}... üòè`, emoji: 'üå∂Ô∏è' },
                { text: `${sender} ha pensieri proibiti su ${target}... üî•`, emoji: 'üòà' }
            ];
            
            const message = choice(messages);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üòà *NAUGHTY*         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${message.emoji}

${message.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Che birichino/a!`;
            
            await msg.reply(response);
        }

        // ========== TEMPERATURA ==========
        else if (command === 'temperatura') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.temperatura @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Tu';
            const temp = random(0, 100);
            
            let emoji = '';
            let status = '';
            
            if (temp >= 90) {
                emoji = 'üî•üî•üî•';
                status = 'ROVENTE! Temperatura alle stelle!';
            } else if (temp >= 70) {
                emoji = 'üî•üî•';
                status = 'Molto calda! C\'√® tensione!';
            } else if (temp >= 50) {
                emoji = 'üî•';
                status = 'Calda! Qualcosa bolle in pentola!';
            } else if (temp >= 30) {
                emoji = 'üå°Ô∏è';
                status = 'Tiepida... serve pi√π fuoco!';
            } else {
                emoji = '‚ùÑÔ∏è';
                status = 'Fredda... nessuna scintilla!';
            }
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üå°Ô∏è *TEMPERATURA*     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ ${sender}
     üíï
üë§ ${target}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üå°Ô∏è *${temp}¬∞C*

${emoji}

${status}`;
            
            await msg.reply(response);
        }

        // ========== CHIMICA ==========
        else if (command === 'chimica') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.chimica @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Tu';
            const chemistry = percentage();
            
            let verdict = '';
            if (chemistry >= 80) verdict = 'üí• ESPLOSIVA! Scintille ovunque!';
            else if (chemistry >= 60) verdict = '‚ö° Forte! C\'√® attrazione!';
            else if (chemistry >= 40) verdict = '‚ú® Presente! Potrebbe funzionare!';
            else verdict = 'üòê Debole... servono pi√π ingredienti!';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚öóÔ∏è *CHIMICA FISICA*  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ ${sender}
     ‚ö°
üë§ ${target}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚öóÔ∏è Chimica: *${chemistry}%*

${verdict}`;
            
            await msg.reply(response);
        }

        // ========== ATTRAZIONE ==========
        else if (command === 'attrazione') {
            const mentions = await msg.getMentions();
            
            if (mentions.length === 0) {
                return msg.reply(
                    '‚ö†Ô∏è *Uso comando:*\n\n' +
                    'üí° Menziona qualcuno!\n\n' +
                    'üìù *Esempio:*\n' +
                    '‚Ä¢ `.attrazione @persona`'
                );
            }
            
            const target = mentions[0].pushname || mentions[0].verifiedName || 'qualcuno';
            const sender = msg._data.notifyName || 'Tu';
            const attraction = percentage();
            
            let magnetic = '';
            if (attraction >= 90) magnetic = 'üß≤üß≤üß≤ MAGNETISMO IRRESISTIBILE!';
            else if (attraction >= 70) magnetic = 'üß≤üß≤ Forte attrazione!';
            else if (attraction >= 50) magnetic = 'üß≤ Attrazione presente!';
            else magnetic = 'üòê Attrazione debole...';
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üß≤ *ATTRAZIONE*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§ ${sender}
     üß≤
üë§ ${target}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä Livello: *${attraction}%*

${magnetic}`;
            
            await msg.reply(response);
        }

        // ========== TENTAZIONE ==========
        else if (command === 'tentazione') {
            const temptations = [
                { text: 'Un bacio rubato nel buio...', emoji: 'üíãüåë' },
                { text: 'Uno sguardo che dice tutto...', emoji: 'üëÅÔ∏èüî•' },
                { text: 'Un tocco "accidentale"...', emoji: 'ü§ö‚ú®' },
                { text: 'Un sussurro proibito...', emoji: 'üëÇüòè' },
                { text: 'Una proposta irresistibile...', emoji: 'üòàüíï' }
            ];
            
            const temptation = choice(temptations);
            
            const response = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üòà *TENTAZIONE*      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${temptation.emoji}

${temptation.text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Resisti... se ci riesci!`;
            
            await msg.reply(response);
        }


        // ===== FUN & SOCIAL =====

        else if (command === 'meme') {
            await msg.reply('üé≠ *MEME*\n\n"Quando ti dicono che il bot √® pronto"\nüòé Il bot: _ancora in sviluppo_');
        }

        else if (command === 'fact') {
            const facts = [
                'Il cuore di un gamberetto si trova nella testa! ü¶ê',
                'I pinguini hanno le ginocchia! üêß',
                'Una formica pu√≤ sopravvivere 2 settimane sott\'acqua! üêú',
                'Gli elefanti non possono saltare! üêò',
                'Le giraffe possono pulirsi le orecchie con la lingua! ü¶í'
            ];
            await msg.reply(`üìö *FATTO INTERESSANTE*\n\n${facts[Math.floor(Math.random() * facts.length)]}`);
        }

        else if (command === 'quote') {
            const quotes = [
                '"La vita √® quello che accade mentre sei impegnato a fare altri piani" - John Lennon',
                '"Il successo √® la somma di piccoli sforzi ripetuti giorno dopo giorno" - Robert Collier',
                '"Non conta quante volte cadi, ma quante volte ti rialzi" - Vince Lombardi',
                '"Il modo migliore per predire il futuro √® crearlo" - Peter Drucker',
                '"Sii il cambiamento che vuoi vedere nel mondo" - Gandhi'
            ];
            await msg.reply(`üí¨ *CITAZIONE*\n\n${quotes[Math.floor(Math.random() * quotes.length)]}`);
        }

        else if (command === 'joke') {
            const jokes = [
                'Perch√© il libro di matematica √® triste?\nPerch√© ha troppi problemi! üòÑ',
                'Cosa fa un gatto in chiesa?\nMiao! üê±',
                'Qual √® il colmo per un elettricista?\nRimanere folgorato! ‚ö°',
                'Cosa dice un muro a un altro muro?\nCi vediamo all\'angolo! üß±',
                'Perch√© i programmatori confondono Halloween con Natale?\nPerch√© Oct 31 = Dec 25! üéÉüéÑ'
            ];
            await msg.reply(`üòÇ *BARZELLETTA*\n\n${jokes[Math.floor(Math.random() * jokes.length)]}`);
        }

        else if (command === 'consiglio') {
            const consigli = [
                'Bevi pi√π acqua oggi! üíß',
                'Fai una pausa e respira profondamente üßò',
                'Chiama una persona cara che non senti da tempo üìû',
                'Fai una passeggiata all\'aria aperta üö∂',
                'Impara qualcosa di nuovo oggi! üìñ',
                'Sorridi di pi√π, fa bene! üòä'
            ];
            await msg.reply(`üí° *CONSIGLIO DEL GIORNO*\n\n${consigli[Math.floor(Math.random() * consigli.length)]}`);
        }

        else if (command === 'sfida') {
            if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
            const mentioned = await msg.getMentions();
            if (mentioned.length === 0) return msg.reply('‚ö†Ô∏è Menziona qualcuno da sfidare!');
            const sfide = [
                'Chi resiste pi√π a lungo senza guardare il telefono! üì±',
                'Gara di flessioni! üí™',
                'Chi fa la battuta pi√π divertente! üòÇ',
                'Gara di memory! üß†',
                'Chi indovina pi√π capitali! üåç'
            ];
            await msg.reply(
                `‚öîÔ∏è *SFIDA*\n\n` +
                `@${(msg.author || msg.from).split('@')[0]} sfida @${mentioned[0].id._serialized.split('@')[0]}\n\n` +
                `${sfide[Math.floor(Math.random() * sfide.length)]}`,
                undefined,
                { mentions: [msg.author || msg.from, mentioned[0].id._serialized] }
            );
        }

        else if (command === 'complimento') {
            const mentioned = await msg.getMentions();
            const target = mentioned.length > 0 ? `@${mentioned[0].id._serialized.split('@')[0]}` : 'Tu';
            const complimenti = [
                'sei una persona fantastica! ‚≠ê',
                'hai un sorriso contagioso! üòä',
                'sei molto intelligente! üß†',
                'hai un cuore d\'oro! üíõ',
                'sei una fonte di ispirazione! üåü'
            ];
            const mentions = mentioned.length > 0 ? [mentioned[0].id._serialized] : undefined;
            await msg.reply(
                `üíù *COMPLIMENTO*\n\n${target} ${complimenti[Math.floor(Math.random() * complimenti.length)]}`,
                undefined,
                mentions ? { mentions } : undefined
            );
        }

        else if (command === 'insulta') {
            const mentioned = await msg.getMentions();
            const target = mentioned.length > 0 ? `@${mentioned[0].id._serialized.split('@')[0]}` : 'Tu';
            const insulti = [
                'hai lo stesso QI di una pantofola! üëü',
                'sei lento come una lumaca assonnata! üêå',
                'sei confuso come un pinguino nel deserto! üêß',
                'hai la memoria di un pesce rosso! üê†',
                'sei pi√π perso di un turista senza GPS! üó∫Ô∏è'
            ];
            const mentions = mentioned.length > 0 ? [mentioned[0].id._serialized] : undefined;
            await msg.reply(
                `üòà *INSULTO (SCHERZOSO)*\n\n${target} ${insulti[Math.floor(Math.random() * insulti.length)]}`,
                undefined,
                mentions ? { mentions } : undefined
            );
        }

        // ===== COMANDO RIVELA CORRETTO =====
else if (command === 'rivela' || command === 'reveal') {
    try {
        const quotedMsg = await msg.getQuotedMessage();
        
        if (!quotedMsg) {
            return msg.reply(
                '‚ö†Ô∏è *RIVELA IMMAGINE*\n\n' +
                'üìù Rispondi a un\'immagine "visualizzabile una volta" con `.rivela`'
            );
        }
        
        console.log('Tipo messaggio:', quotedMsg.type);
        console.log('Ha media:', quotedMsg.hasMedia);
        
        // Controlla se √® ciphertext (view once criptato) o ha media normale
        const isViewOnce = quotedMsg.type === 'ciphertext';
        const hasNormalMedia = quotedMsg.hasMedia === true;
        
        if (!isViewOnce && !hasNormalMedia) {
            return msg.reply('‚ö†Ô∏è Il messaggio non contiene media!');
        }
        
        if (isViewOnce) {
            return msg.reply(
                '‚ùå *IMPOSSIBILE RIVELARE*\n\n' +
                '‚ö†Ô∏è I messaggi "visualizzabili una volta" sono criptati end-to-end.\n\n' +
                'üîí WhatsApp protegge questi messaggi e non possono essere scaricati dal bot dopo l\'invio.\n\n' +
                'üí° Questo √® per la tua privacy e sicurezza!'
            );
        }
        
        await msg.reply('üîì Download in corso...');
        
        // Scarica il media normale
        const media = await quotedMsg.downloadMedia();
        
        if (!media || !media.data) {
            return msg.reply('‚ùå Impossibile scaricare il media!');
        }
        
        const contact = await msg.getContact();
        const userName = contact.pushname || 'Qualcuno';
        
        // Ricrea il media
        const revealedMedia = new MessageMedia(
            media.mimetype,
            media.data,
            'revealed_' + (media.filename || 'media')
        );
        
        // Invia il media
        await client.sendMessage(
            msg.from, 
            revealedMedia, 
            { caption: `üîì *Media inviato da ${userName}*` }
        );
        
        await msg.reply('‚úÖ Media inviato con successo!');
        
    } catch (err) {
        console.error('Errore rivela:', err);
        await msg.reply('‚ùå Errore: ' + err.message);
    }
}

// ===== COMANDO STICKER CORRETTO =====
else if (command === 's' || command === 'sticker') {
    try {
        let mediaMsg = null;
        
        // 1. Controlla se il messaggio corrente ha media
        if (msg.hasMedia) {
            mediaMsg = msg;
        } 
        // 2. Controlla il messaggio quotato
        else {
            try {
                const quoted = await msg.getQuotedMessage();
                if (quoted) {
                    console.log('Quoted type:', quoted.type);
                    console.log('Quoted hasMedia:', quoted.hasMedia);
                    
                    // Controlla se √® ciphertext (view once)
                    if (quoted.type === 'ciphertext') {
                        return msg.reply(
                            '‚ùå *IMPOSSIBILE CREARE STICKER*\n\n' +
                            '‚ö†Ô∏è Le immagini "visualizzabili una volta" sono criptate.\n\n' +
                            'üîí WhatsApp protegge questi messaggi per la tua privacy.\n\n' +
                            'üí° Invia l\'immagine normalmente per creare lo sticker!'
                        );
                    }
                    
                    // Se ha media normale, procedi
                    if (quoted.hasMedia) {
                        mediaMsg = quoted;
                    }
                }
            } catch (e) {
                console.error('Errore quote:', e);
            }
        }
        
        if (!mediaMsg) {
            return msg.reply(
                "üìé *CREA STICKER*\n\n" +
                "‚úÖ Modi d'uso:\n" +
                "‚Ä¢ Invia immagine con caption `.s`\n" +
                "‚Ä¢ Rispondi a immagine/GIF con `.s`\n\n" +
                "‚ö†Ô∏è Formati: JPG, PNG, GIF, MP4 (max 1MB)\n\n" +
                "‚ùå NON funziona con foto 'view once' (sono criptate)"
            );
        }
        
        // Verifica che sia immagine o video
        const mediaType = mediaMsg.type;
        if (!['image', 'video'].includes(mediaType)) {
            return msg.reply('‚ö†Ô∏è Solo immagini o video/GIF!');
        }
        
        await msg.reply('‚è≥ Creazione sticker...');
        
        // Scarica il media
        const media = await mediaMsg.downloadMedia();
        
        if (!media || !media.data) {
            return msg.reply("‚ùå Impossibile scaricare il media!");
        }
        
        // Verifica il mimetype
        if (!media.mimetype || (!media.mimetype.includes('image') && !media.mimetype.includes('video'))) {
            return msg.reply('‚ö†Ô∏è Formato non supportato!');
        }
        
        const isAnimated = media.mimetype.includes('gif') || media.mimetype.includes('video');
        
        // Crea lo sticker
        const stickerMedia = new MessageMedia(
            media.mimetype,
            media.data,
            'sticker'
        );
        
        const stickerOptions = {
            sendMediaAsSticker: true,
            stickerName: 'WhatsApp Bot',
            stickerAuthor: 'Bot'
        };
        
        if (isAnimated) {
            stickerOptions.stickerAnimated = true;
        }
        
        await client.sendMessage(msg.from, stickerMedia, stickerOptions);
        await msg.reply('‚úÖ Sticker creato! üéâ');
        
    } catch (err) {
        console.error('Errore sticker:', err);
        
        let errorMsg = '‚ùå Errore: ';
        
        if (err.message.includes('large') || err.message.includes('size')) {
            errorMsg += 'File troppo grande! Max 500KB immagini, 1MB GIF.';
        } else if (err.message.includes('format')) {
            errorMsg += 'Formato non supportato.';
        } else if (err.message.includes('Processing')) {
            errorMsg += 'Errore nel processare il media. Riprova con un file pi√π piccolo.';
        } else {
            errorMsg += err.message;
        }
        
        await msg.reply(errorMsg);
    }
}

// COMANDO: .sticker-pack -> info sui limiti degli sticker
else if (command === 'sticker-info' || command === 'stickerinfo') {
    await msg.reply(
        "üé® *INFO STICKER*\n\n" +
        "üìè *Limiti:*\n" +
        "‚Ä¢ Immagini: max 500KB\n" +
        "‚Ä¢ GIF/Video: max 1MB\n" +
        "‚Ä¢ Durata video: max 6 secondi\n" +
        "‚Ä¢ Risoluzione: 512x512 px (ottimale)\n\n" +
        "‚úÖ *Formati supportati:*\n" +
        "‚Ä¢ JPG, PNG (statici)\n" +
        "‚Ä¢ GIF (animati)\n" +
        "‚Ä¢ MP4 (animati, max 6s)\n\n" +
        "üí° *Uso:*\n" +
        "‚Ä¢ `.s` su immagine\n" +
        "‚Ä¢ `.s` rispondendo a media"
    );
}

        // BONUS: Roulette dell'amore - trova partner per l'utente che scrive
else if (command === 'amore' || command === 'trovamore') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
    
    try {
        const senderId = msg.author || msg.from;
        
        // Ottieni tutti i partecipanti (escluso chi ha mandato il comando e il bot)
        const botId = client.info?.wid?._serialized || client.info?.me?._serialized || '';
        const participants = chat.participants.filter(p => {
            return p.id._serialized !== senderId && p.id._serialized !== botId;
        });
        
        if (participants.length === 0) {
            return msg.reply('‚ö†Ô∏è Non ci sono altri membri disponibili nel gruppo!');
        }
        
        // Scegli un partner casuale
        const partner = participants[Math.floor(Math.random() * participants.length)];
        const percentuale = Math.floor(Math.random() * 101);
        
        let messaggio = '';
        if (percentuale < 30) messaggio = 'üíî Non sembra promettente...';
        else if (percentuale < 60) messaggio = 'üíõ C\'√® del potenziale!';
        else if (percentuale < 80) messaggio = 'üíï Bella coppia!';
        else messaggio = 'üíñ Match perfetto!';
        
        const nomePartner = partner.id._serialized.split('@')[0];
        const nomeSender = senderId.split('@')[0];
        
        await msg.reply(
            `üíò *ROULETTE DELL\'AMORE* üé∞\n\n` +
            `@${nomeSender} ‚ù§Ô∏è @${nomePartner}\n\n` +
            `Compatibilit√†: *${percentuale}%*\n${messaggio}`,
            undefined,
            { mentions: [senderId, partner.id._serialized] }
        );
        
    } catch (err) {
        console.error('Errore amoroulette:', err);
        await msg.reply('‚ùå Errore nella ricerca del partner. Riprova!');
    }
}

        // VARIANTE: Crea coppia con utenti specifici
else if (command === 'shippa') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
    
    const mentioned = await msg.getMentions();
    
    if (mentioned.length === 0) {
        // Se non ci sono mention, comportati come creacoppia
        return msg.reply('üí° Usa `.creacoppia` per una coppia casuale, oppure `.shippa @user1 @user2` per shippare due persone specifiche!');
    }
    
    if (mentioned.length === 1) {
        return msg.reply('‚ö†Ô∏è Menziona un secondo utente da shippare!');
    }
    
    if (mentioned.length >= 2) {
        const frasi = [
            'sono ufficialmente una coppia! üíë',
            'si sono sposati! üíí',
            'sono innamorati! üòç',
            'sono fidanzati! üíï',
            'sono destinati a stare insieme! ‚ú®',
            'hanno fatto match! üíñ',
            'sono anime gemelle! üí´'
        ];
        
        const fraseScelta = frasi[Math.floor(Math.random() * frasi.length)];
        const nome1 = mentioned[0].id._serialized.split('@')[0];
        const nome2 = mentioned[1].id._serialized.split('@')[0];
        
        await msg.reply(
            `üíò *CUPIDO HA COLPITO!* üèπ\n\n` +
            `@${nome1} e @${nome2} ${fraseScelta}\n\n` +
            `üíï Che coppia! üéâ`,
            undefined,
            { mentions: [mentioned[0].id._serialized, mentioned[1].id._serialized] }
        );
    }
}

        else if (command === 'creacoppia') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
    
    try {
        // Ottieni tutti i partecipanti del gruppo (escluso il bot)
        const participants = chat.participants.filter(p => {
            // Escludi il bot stesso
            const botId = client.info?.wid?._serialized || client.info?.me?._serialized || '';
            return p.id._serialized !== botId;
        });
        
        if (participants.length < 2) {
            return msg.reply('‚ö†Ô∏è Servono almeno 2 membri nel gruppo (escluso il bot)!');
        }
        
        // Scegli due utenti casuali diversi
        const shuffled = participants.sort(() => Math.random() - 0.5);
        const user1 = shuffled[0];
        const user2 = shuffled[1];
        
        // Frasi romantiche
        const frasi = [
            'sono ufficialmente una coppia! üíë',
            'si sono sposati! üíí',
            'sono innamorati! üòç',
            'sono fidanzati! üíï',
            'sono destinati a stare insieme! ‚ú®',
            'hanno fatto match! üíñ',
            'sono anime gemelle! üí´',
            'formano una coppia perfetta! üíù',
            'si sono dichiarati! üíå',
            'hanno iniziato a frequentarsi! ü•∞'
        ];
        
        const fraseScelta = frasi[Math.floor(Math.random() * frasi.length)];
        
        // Ottieni i nomi o numeri degli utenti
        const nome1 = user1.id.user || user1.id._serialized.split('@')[0];
        const nome2 = user2.id.user || user2.id._serialized.split('@')[0];
        
        await msg.reply(
            `üíò *CUPIDO HA COLPITO!* üèπ\n\n` +
            `@${nome1} e @${nome2} ${fraseScelta}\n\n` +
            `üíï Auguri ai neo-fidanzati! üéâ`,
            undefined,
            { mentions: [user1.id._serialized, user2.id._serialized] }
        );
        
    } catch (err) {
        console.error('Errore creacoppia:', err);
        await msg.reply('‚ùå Errore nella creazione della coppia. Riprova!');
    }
}

        // ===== TEXT MANIPULATION =====

        else if (command === 'faketext') {
            if (!args.length) return msg.reply('‚ö†Ô∏è Usa: .faketext [testo]');
            const testo = msg.body.slice(10);
            await msg.reply(`‚ú® *TESTO FAKE*\n\n_"${testo}"_\n\n- Qualcuno, probabilmente`);
        }

        else if (command === 'ascii') {
            if (!args.length) return msg.reply('‚ö†Ô∏è Usa: .ascii [testo]');
            const testo = args.join(' ').toUpperCase();
            const ascii = {
                'A': '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó \n ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\n ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\n ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë\n ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë',
                'B': ' ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó \n ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\n ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù\n ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\n ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù',
                'C': '  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\n ‚ñà‚ñà‚ïë     \n ‚ñà‚ñà‚ïë     \n ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó'
            };
            const output = testo.split('').map(c => ascii[c] || c).join('\n\n');
            await msg.reply(`\`\`\`\n${output}\n\`\`\``);
        }

        else if (command === 't' && args[0]) {
    const chatId = chat.id._serialized;
    if (!gameStates[chatId]?.tictactoe) return msg.reply('‚ö†Ô∏è Nessuna partita attiva! Usa .tictactoe');
    
    const game = gameStates[chatId].tictactoe;
    const pos = parseInt(args[0]) - 1;
    
    if (isNaN(pos) || pos < 0 || pos > 8) return msg.reply('‚ö†Ô∏è Posizione non valida! Usa 1-9');
    if (game.board[pos] !== '‚¨ú') return msg.reply('‚ö†Ô∏è Posizione gi√† occupata!');
    
    const currentPlayer = msg.author || msg.from;
    if (currentPlayer !== game.turn) return msg.reply('‚ö†Ô∏è Non √® il tuo turno!');
    
    const symbol = currentPlayer === game.player1 ? '‚≠ï' : '‚ùå';
    game.board[pos] = symbol;
    
    // Controlla vittoria
    const wins = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];
    const hasWon = wins.some(w => w.every(i => game.board[i] === symbol));
    
    if (hasWon) {
        await msg.reply(
            `üéâ *VITTORIA!*\n\n` +
            `${game.board.slice(0,3).join('')}\n` +
            `${game.board.slice(3,6).join('')}\n` +
            `${game.board.slice(6,9).join('')}\n\n` +
            `@${currentPlayer.split('@')[0]} ha vinto!`,
            undefined,
            { mentions: [currentPlayer] }
        );
        delete gameStates[chatId].tictactoe;
    } else if (!game.board.includes('‚¨ú')) {
        await msg.reply(
            `ü§ù *PAREGGIO!*\n\n` +
            `${game.board.slice(0,3).join('')}\n` +
            `${game.board.slice(3,6).join('')}\n` +
            `${game.board.slice(6,9).join('')}`
        );
        delete gameStates[chatId].tictactoe;
    } else {
        game.turn = game.turn === game.player1 ? game.player2 : game.player1;
        await msg.reply(
            `${game.board.slice(0,3).join('')}\n` +
            `${game.board.slice(3,6).join('')}\n` +
            `${game.board.slice(6,9).join('')}\n\n` +
            `Turno di @${game.turn.split('@')[0]}`,
            undefined,
            { mentions: [game.turn] }
        );
    }
    saveData();
}

        else if (command === 'reverse') {
            if (!args.length) return msg.reply('‚ö†Ô∏è Usa: .reverse [testo]');
            const testo = msg.body.slice(9);
            await msg.reply(`üîÑ *TESTO INVERTITO*\n\n${testo.split('').reverse().join('')}`);
        }

        else if (command === 'caps') {
            if (!args.length) return msg.reply('‚ö†Ô∏è Usa: .caps [testo]');
            const testo = msg.body.slice(6);
            await msg.reply(testo.toUpperCase());
        }

        else if (command === 'mock') {
            if (!args.length) return msg.reply('‚ö†Ô∏è Usa: .mock [testo]');
            const testo = msg.body.slice(6);
            const mocked = testo.split('').map((c, i) => i % 2 === 0 ? c.toLowerCase() : c.toUpperCase()).join('');
            await msg.reply(`ü§™ ${mocked}`);
        }



            
        // ===== MODERAZIONE =====

else if (command === 'purge') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    const num = parseInt(args[0]);
    if (isNaN(num) || num < 1 || num > 100) {
        return msg.reply('‚ö†Ô∏è Specifica un numero tra 1 e 100!\n\nüìù Esempio: `.purge 10`');
    }
    
    try {
        await msg.reply(`üóëÔ∏è Eliminazione di ${num} messaggi in corso...\n\n_Nota: WhatsApp Web ha limitazioni sulla cancellazione massiva_`);
        
        // Ottieni i messaggi della chat
        const messages = await chat.fetchMessages({ limit: num + 1 }); // +1 per escludere il comando stesso
        let deleted = 0;
        
        for (let i = 1; i < messages.length && i <= num; i++) {
            try {
                await messages[i].delete(true); // true = elimina per tutti
                deleted++;
                await new Promise(resolve => setTimeout(resolve, 300)); // Pausa per evitare rate limit
            } catch (e) {
                console.error('Errore eliminazione messaggio:', e);
            }
        }
        
        await msg.reply(`‚úÖ Eliminati ${deleted} messaggi su ${num} richiesti.`);
    } catch (err) {
        console.error('Errore purge:', err);
        await msg.reply('‚ùå Errore durante l\'eliminazione dei messaggi.');
    }
}

// ========== PIN MESSAGE ==========
else if (command === 'pin') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        const quoted = await msg.getQuotedMessage();
        if (!quoted) {
            return msg.reply('‚ö†Ô∏è Rispondi al messaggio da fissare!\n\nüí° Quota il messaggio e usa `.pin`');
        }
        
        await quoted.pin();
        await msg.reply('‚úÖ üìå Messaggio fissato!');
        
    } catch (err) {
        console.error('Errore pin:', err);
        await msg.reply('‚ùå Impossibile fissare il messaggio. Verifica i permessi.');
    }
}

// ========== UNPIN MESSAGE ==========
else if (command === 'unpin') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        const quoted = await msg.getQuotedMessage();
        if (!quoted) {
            return msg.reply('‚ö†Ô∏è Rispondi al messaggio fissato da rimuovere!\n\nüí° Quota il messaggio e usa `.unpin`');
        }
        
        await quoted.unpin();
        await msg.reply('‚úÖ üìå Pin rimosso!');
        
    } catch (err) {
        console.error('Errore unpin:', err);
        await msg.reply('‚ùå Impossibile rimuovere il pin. Verifica i permessi.');
    }
}

   // ===== COMANDO .SHIP =====
else if (command === 'ship') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Questo comando funziona solo nei gruppi!');
    
    const mentioned = await msg.getMentions();

    // Se non ci sono due menzioni
    if (mentioned.length < 2) {
        return msg.reply('üí° Usa: `.ship @utente1 @utente2` per vedere la compatibilit√† amorosa!');
    }

    const user1 = mentioned[0];
    const user2 = mentioned[1];

    // Calcolo casuale della compatibilit√† (0-100)
    const lovePercentage = Math.floor(Math.random() * 101);

    // Determina un messaggio in base al punteggio
    let description = '';
    if (lovePercentage >= 90) description = 'üíû Anima gemella trovata! Amore eterno! üíç';
    else if (lovePercentage >= 70) description = '‚ù§Ô∏è Coppia perfetta, c‚Äô√® grande intesa!';
    else if (lovePercentage >= 50) description = 'üíò Potrebbe funzionare... con un po‚Äô di impegno!';
    else if (lovePercentage >= 30) description = 'üíî Mmh‚Ä¶ non sembra ci sia molta chimica.';
    else description = 'üò¨ Meglio restare amici!';

    // Componi un nome ‚Äúship‚Äù (unione dei due nomi)
    const name1 = (user1.pushname || user1.id.user || 'User1').split(' ')[0];
    const name2 = (user2.pushname || user2.id.user || 'User2').split(' ')[0];
    const shipName = name1.slice(0, Math.floor(name1.length / 2)) + name2.slice(Math.floor(name2.length / 2));

    // Messaggio finale
    const resultMsg = `üíû *Shipping Time!* üíû\n\n` +
                      `‚ù§Ô∏è *${name1}* + *${name2}* = *${shipName}*\n\n` +
                      `üíò Compatibilit√†: *${lovePercentage}%*\n\n${description}`;

    // Invia il messaggio con le menzioni
    await msg.reply(resultMsg, null, { mentions: [user1, user2] });
}
 

// ===== GESTIONE RICHIESTE GRUPPO =====

else if (command === 'accettarichieste') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    try {
        autoAcceptRequests[chat.id._serialized] = true;
        await msg.reply('‚úÖ *Accettazione automatica attivata!*\n\nIl bot accetter√† automaticamente tutte le richieste di ingresso nel gruppo.');
    } catch (err) {
        await msg.reply('‚ùå Errore nell\'attivare l\'accettazione automatica.');
    }
}

else if (command === 'rifiutarichieste') {
    if (!isGroup) return msg.reply('‚ö†Ô∏è Comando disponibile solo nei gruppi!');
    if (!await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando!');
    
    try {
        autoAcceptRequests[chat.id._serialized] = false;
        await msg.reply('‚ùå *Accettazione automatica disattivata!*\n\nIl bot non accetter√† pi√π automaticamente le richieste di ingresso.');
    } catch (err) {
        await msg.reply('‚ùå Errore nel disattivare l\'accettazione automatica.');
    }
}

// ===== COMANDO LEVEL =====
if (command === 'level' || command === 'livello') {
    const userId = getUserIdFromMsg(msg);
    const stats = getUserStats(userId);
    const level = stats.level || 1;
    const xp = stats.xp || 0;
    const xpForNext = level * 100;
    const progressBar = createProgressBar(xp, xpForNext);
    
    try {
        const contact = await msg.getContact();
        const userName = contact.pushname || contact.name || 'Utente';
        
        await msg.reply(
            `üèÜ *LIVELLO DI ${userName.toUpperCase()}*\n\n` +
            `üìä Livello: *${level}*\n` +
            `‚≠ê XP: *${xp}* / ${xpForNext}\n` +
            `${progressBar}\n\n` +
            `üìà Progresso: ${Math.floor((xp / xpForNext) * 100)}%\n` +
            `üéØ XP mancanti: *${xpForNext - xp}*\n\n` +
            `üí¨ Messaggi inviati: ${stats.messages || 0}`
        );
    } catch (err) {
        console.error('Errore level:', err);
        await msg.reply('‚ùå Errore nel recuperare il livello.');
    }
}

// ===== COMANDO PROFILO =====
else if (command === 'profilo' || command === 'profile') {
    const userId = getUserIdFromMsg(msg);
    const stats = getUserStats(userId);
    const level = stats.level || 1;
    const xp = stats.xp || 0;
    const messages = stats.messages || 0;
    const rep = stats.reputation || 0;
    const bio = stats.bio || 'Nessuna bio impostata';

    // --- Recupera Instagram se presente ---
    let igHandle = null;
    if (stats.instagram) igHandle = stats.instagram;
    else if (stats.ig) igHandle = stats.ig;
    if (igHandle) {
        igHandle = igHandle.toString().trim().replace(/^@/, ''); // normalizza rimuovendo @
        if (igHandle === '') igHandle = null;
    }

    try {
        const contact = await msg.getContact();
        const userName = contact.pushname || contact.name || 'Utente';
        const about = contact.statusMessage || 'Nessuno stato';

        // Determina il rank
        let rank = 'ü•â Bronzo';
        if (level >= 30) rank = 'üíé Diamante';
        else if (level >= 20) rank = 'üèÖ Platino';
        else if (level >= 10) rank = 'ü•á Oro';
        else if (level >= 5) rank = 'ü•à Argento';

        // Recupera economia
        const eco = economy[userId] || { money: 0, bank: 0 };

        // Recupera warnings
        const warns = warnings[userId] || 0;

        // Se esiste Instagram, prepara la riga (tag + link)
        const igSection = igHandle ? `üì∏ Instagram: @${igHandle}\nüîó https://instagram.com/${igHandle}\n\n` : '';

        const profileMsg =
            `üë§ *PROFILO DI ${userName.toUpperCase()}*\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
            `üèÜ Livello: *${level}*\n` +
            `‚≠ê XP Totale: *${xp}*\n` +
            `üéñÔ∏è Rank: ${rank}\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
            `üìä *STATISTICHE*\n` +
            `üí¨ Messaggi: ${messages}\n` +
            `‚≠ê Reputazione: ${rep}\n` +
            `üí∞ Money: $${eco.money}\n` +
            `üè¶ Bank: $${eco.bank}\n` +
            `‚ö†Ô∏è Warning: ${warns}/3\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
            igSection + // qui inserisco l'Instagram se presente
            `üí≠ Bio: _"${bio}"_\n` +
            `üì± Stato: _"${about}"_\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        // Prova a inviare con foto profilo
        try {
            const profilePic = await contact.getProfilePicUrl();
            const media = await MessageMedia.fromUrl(profilePic);
            await client.sendMessage(msg.from, media, { caption: profileMsg });
        } catch (e) {
            // Se non c'√® foto profilo, invia solo testo
            await msg.reply(profileMsg);
        }

    } catch (err) {
        console.error('Errore profilo:', err);
        await msg.reply('‚ùå Errore nel recuperare il profilo.');
    }
}

     // ========== .setig ==========
else if (command === 'setig') {
    const ig = args.join(' ').trim();
    if (!ig) return await msg.reply('üì∏ Uso corretto:\n.setig {instagram}\nEsempio: `.setig cristian_fx`');

    initUser(userId);
    const clean = ig.replace(/^@/, '').trim();

    if (!/^[A-Za-z0-9._]{1,30}$/.test(clean))
        return await msg.reply('‚ö†Ô∏è Username Instagram non valido. Usa solo lettere, numeri, punti o underscore.');

    userStats[userId].instagram = clean;
    saveUserStats();

    await msg.reply(`‚úÖ Il tuo Instagram √® stato impostato su: @${clean}\nüîó https://instagram.com/${clean}`);
}


// ========== .setuserig ==========
else if (command === 'setuserig') {
    const mentions = await msg.getMentions();
    let targetId = null;
    let ig = '';

    if (mentions.length > 0) {
        targetId = mentions[0].id._serialized;
        ig = args.slice(1).join(' ').trim();
    } else {
        if (args.length < 2)
            return await msg.reply('üì∏ Uso corretto:\n.setuserig {@utente} {instagram}\nOppure: .setuserig {userId} {instagram}');
        targetId = args[0];
        ig = args.slice(1).join(' ').trim();
    }

    if (!ig) return await msg.reply('‚ö†Ô∏è Specifica l‚Äôhandle Instagram.');

    const clean = ig.replace(/^@/, '').trim();
    if (!/^[A-Za-z0-9._]{1,30}$/.test(clean))
        return await msg.reply('‚ö†Ô∏è Username Instagram non valido. Usa solo lettere, numeri, punti o underscore.');

    initUser(targetId);
    userStats[targetId].instagram = clean;
    saveUserStats();

    let targetDisplay = 'Utente';
    try {
        if (mentions.length > 0)
            targetDisplay = mentions[0].pushname || mentions[0].verifiedName || targetDisplay;
    } catch {}

    await msg.reply(`‚úÖ Instagram di *${targetDisplay}* impostato su: @${clean}\nüîó https://instagram.com/${clean}`);
}

// ========== CLEAR CACHE (DS) ==========
else if (command === 'ds') {
    // Permessi: se √® in gruppo richiedi admin, altrimenti lascia passare (es. DM)
    if (isGroup && !await isAdmin(msg, chat)) return msg.reply('‚ö†Ô∏è Solo admin!');
    
    try {
        // funzione helper per contare elementi in vari tipi di container
        const countItems = (c) => {
            if (!c) return 0;
            if (typeof c.size === 'number') return c.size;         // Map/Set
            if (Array.isArray(c)) return c.length;                // Array
            if (typeof c === 'object') return Object.keys(c).length; // plain object
            return 0;
        };

        // Conta prima della pulizia (per report)
        const before = {
            groupData: countItems(groupData),
            games: countItems(games),
            economy: countItems(economy),
            userStats: countItems(userStats),
            marriages: countItems(marriages),
            pets: countItems(pets),
            warnings: countItems(warnings),
            automodConfig: countItems(automodConfig)
        };

        // Pulisci in modo sicuro: se sono strutture con .clear() usalo, altrimenti re-inizializza
        if (groupData && typeof groupData.clear === 'function') groupData.clear(); else groupData = {};
        if (games && typeof games.clear === 'function') games.clear(); else games = {};
        if (economy && typeof economy.clear === 'function') economy.clear(); else economy = {};
        if (userStats && typeof userStats.clear === 'function') userStats.clear(); else userStats = {};
        if (marriages && typeof marriages.clear === 'function') marriages.clear(); else marriages = {};
        if (pets && typeof pets.clear === 'function') pets.clear(); else pets = {};
        if (warnings && typeof warnings.clear === 'function') warnings.clear(); else warnings = {};
        if (automodConfig && typeof automodConfig.clear === 'function') automodConfig.clear(); else automodConfig = {};

        // Prova a liberare memoria (se Node √® stato avviato con --expose-gc)
        let gcMsg = '‚ö†Ô∏è GC non disponibile (avvia node con --expose-gc per usarlo)';
        if (typeof global !== 'undefined' && typeof global.gc === 'function') {
            try {
                global.gc();
                gcMsg = '‚úÖ Garbage collector eseguito (global.gc())';
            } catch (e) {
                gcMsg = '‚ö†Ô∏è Tentativo GC fallito: ' + e.message;
            }
        }

        // Se hai una funzione per salvare su disco (es. saveData), chiamala per mantenere coerenza
        if (typeof saveData === 'function') {
            try {
                await saveData();
            } catch (e) {
                // non bloccare l'operazione se save fallisce
                console.error('saveData fallita dopo ds:', e);
            }
        }

        // Report all'utente (conteggio prima -> pulito)
        const report = [
            `‚úÖ Cache pulita! Il bot resta attivo.`,
            ``,
            `Elementi rimossi (prima della pulizia):`,
            `‚Ä¢ groupData: ${before.groupData}`,
            `‚Ä¢ games: ${before.games}`,
            `‚Ä¢ economy: ${before.economy}`,
            `‚Ä¢ userStats: ${before.userStats}`,
            `‚Ä¢ marriages: ${before.marriages}`,
            `‚Ä¢ pets: ${before.pets}`,
            `‚Ä¢ warnings: ${before.warnings}`,
            `‚Ä¢ automodConfig: ${before.automodConfig}`,
            ``,
            `${gcMsg}`
        ].join('\n');

        await msg.reply(report);

    } catch (err) {
        console.error('Errore comando .ds:', err);
        await msg.reply('‚ùå Errore durante la pulizia della cache. Controlla i log.');
    }
}




        // Risposta quiz/math se l'utente risponde con numeri
        else if (!isNaN(text) && text.trim() !== '') {
            const chatId = msg.from;
            const num = parseInt(text);
            
            // Controlla quiz
            if (gameStates[chatId]?.quiz) {
                const q = gameStates[chatId].quiz;
                if (num >= 1 && num <= 3) {
                    if (num - 1 === q.c) {
                        await msg.reply(`üéâ *CORRETTO!*\n\nLa risposta giusta era: ${q.a[q.c]}`);
                    } else {
                        await msg.reply(`‚ùå *SBAGLIATO!*\n\nLa risposta corretta era: ${q.a[q.c]}`);
                    }
                    delete gameStates[chatId].quiz;
                    saveData();
                }
            }
            
            // Controlla math
            if (gameStates[chatId]?.math) {
                const m = gameStates[chatId].math;
                if (num === m.risposta) {
                    await msg.reply(`üéâ *CORRETTO!*\n\n${m.domanda} = ${m.risposta}`);
                } else {
                    await msg.reply(`‚ùå *SBAGLIATO!*\n\n${m.domanda} = ${m.risposta}`);
                }
                delete gameStates[chatId].math;
                saveData();
            }
        }
        
        // Risposta memory
        else if (gameStates[msg.from]?.memory && !gameStates[msg.from].memory.attesa) {
            const game = gameStates[msg.from].memory;
            if (text === game.sequenza.toLowerCase()) {
                await msg.reply(`üéâ *ESATTO!*\n\nHai memorizzato la sequenza corretta!`);
            } else {
                await msg.reply(`‚ùå *SBAGLIATO!*\n\nLa sequenza era: ${game.sequenza}`);
            }
            delete gameStates[msg.from].memory;
            saveData();
        }

        

    // ========== Fallback per comandi non riconosciuti ==========
        else {
            if (!isGroup) {
                await msg.reply('‚ùì Comando non riconosciuto. Usa `.fun` per la lista dei comandi fun!');
            }
        }

    } catch (error) {
        console.error('‚ö†Ô∏è Errore nel processamento del messaggio:', error);
        try {
            await msg.reply('‚ùå Si √® verificato un errore! Riprova.');
        } catch (err) {
            console.error('Errore invio messaggio di errore:', err);
        }
    }

    } catch (error) {
        console.error('‚ö†Ô∏è Errore nel processamento del messaggio:', error);
        await msg.reply('‚ùå Si √® verificato un errore! Riprova.');
    }
}); // Chiude client.on('message')

// Avvia il client
client.initialize();

console.log('üöÄ Bot WhatsApp in avvio...');

